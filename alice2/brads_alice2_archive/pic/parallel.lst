PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 1

     1					;
     2					; Brad and Lawrence's PIC Alice II keyboard test program.
     3					; Accepts a byte on B1, serially clocked in on rising edges of
     4					; B0 (1 start bit, two stop bits), writes that byte on PORTD,
     5					; then interrupts the CPU by setting A0 low.
     6					; On PSP RD interrupt, clears the interrupt by setting A0 high.
     7					;
     8					; January 25, 1996
     9					;
    10						maclib 'p64.inc'
    11					
    12					        device  pic16c64,xt_osc,wdt_off,pwrt_off,protect_off
    13					
    14	=0020				w_temp  equ     020h
    15	=0021				status_temp equ 021h
    16					
    17	=0002				initstopcnt        equ     2    ; # of stop bits per byte (+ 1)
    18	=0022				stopcnt            equ     022h ; storage for stop bits left
    19	=000A				initdatabits       equ     10   ; start bits + data bits (+ 1)
    20	=0023				databits           equ     023h ; storage for kbd data shifts left
    21					                                ; (1st bit shifted in gets pushed off end)
    22	=0024				kbdbyte            equ     024h ; storage for keyboard byte
    23					
    24	0000-				reset
    25					        org     0               ; on reset
    26	0000- 2805			        goto    start
    27					
    28	0001-				intsvc
    29					        org     4               ; on interrupt
    30	0004- 281F			        goto    interrupt
    31					
    32	0005-				start
    33	0005- 1283			        bcf     rp0             ; bank 0
    34	0006- 1405			        bsf     porta,0         ; don't interrupt CPU on IRQ 0
    35	0007- 1485			        bsf     porta,1         ; don't interrupt CPU on IRQ 1
    36	0008- 138C			        bcf     pspif           ; clear PSP interrupt flag
    37	0009- 0187			        clrf    portc           ; nothing on our debug port
    38					
    39	000A- 3002			        movlw   initstopcnt
    40	000B- 00A2			        movwf   stopcnt         ; set up # of stop bits in kbd data
    41	000C- 300A			        movlw   initdatabits
    42	000D- 00A3			        movwf   databits        ; set up # of actual shifts to make
    43					
    44	000E- 1683			        bsf     rp0             ; bank 1
    45	000F- 1005			        bcf     trisa,0         ; bit 0 port A is output
    46	0010- 1085			        bcf     trisa,1         ; bit 1 port A is output
    47					
    48	0011- 1409			        bsf     trise0          ; /RD is input
    49	0012- 1489			        bsf     trise1          ; /WR is input
    50	0013- 1509			        bsf     trise2          ; /CS is input
    51					
    52					        ; don't need to set trisc, default is 0xff (input)
    53					        ; don't need to set trisb, default is 0xff (input)
    54	0014- 1701			        bsf     intedg          ; RB0/INT triggers on low-to-high
    55					
    56	0015- 178C			        bsf     pspie           ; enable PSP interrupts
    57	0016- 1609			        bsf     pspmode         ; enable PSP mode
    58	0017- 170B			        bsf     peie            ; enable peripheral interrupts
PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 2

    59	0018- 108B			        bcf     intf            ; clear RB0/INT interrupt flag
    60	0019- 160B			        bsf     inte            ; enable RB0/INT interrupt
    61	001A- 100B			        bcf     rbif            ; clear RB* interrupt on change flag
    62	001B- 158B			        bsf     rbie            ; enable RB* interrupt on change
    63	001C- 178B			        bsf     gie             ; enable all interrupts
    64					
    65	001D- 1283			        bcf     rp0             ; bank 0
    66					                                                            
    67	001E-				loop
    68	001E- 281E			        goto loop               ; infinite loop
    69					                                  
    70	001F-				interrupt
    71					        ; save W and STATUS
    72	001F- 00A0			        movwf   w_temp          ; save W
    73	0020- 0E03			        swapf   status, w       ; save status in W
    74	0021- 1283			        bcf     rp0             ; bank 0
    75	0022- 00A1			        movwf   status_temp     ; save status
    76					
    77	0023- 1F8C			        btfss   pspif           ; test PSP interrupt flag
    78	0024- 282D			        goto    notpsp          ; not PSP
    79	0025- 1683			        bsf     rp0             ; bank 1
    80	0026- 1F89			        btfss   ibf             ; did we get a write?
    81	0027- 2829			        goto    gotread         ; nope, jump to read
    82					        ; we got a write
    83					        ; don't do anything here.  Someday write to keyboard.
    84					        ; panic if you see bit 3 go up!
    85	0028- 284D			        goto    endpspinterrupt ; return
    86					
    87	0029-				gotread
    88	0029- 1283			        bcf     rp0             ; bank 0
    89	002A- 1405			        bsf     porta,0         ; don't assert interrupt on IRQ 0
    90	002B- 1485			        bsf     porta,1         ; don't assert interrupt on IRQ 1
    91	002C- 284D			        goto    endpspinterrupt
    92					
    93	002D-				notpsp                          ; must be RB0/INT interrupt
    94	002D- 1C8B				btfss	intf		; skip next if is definitely INT interrupt
    95	002E- 2845				goto	parallelin	; it's a byte from the parallel port
    96					
    97	002F- 0BA3			        decfsz  databits, 1     ; skip next if done with data bits
    98	0030- 283E			        goto    gotbit          ; have a good bit on port B
    99	0031- 0BA2			        decfsz  stopcnt, 1      ; skip next if done with keyboard cycle
   100	0032- 283B			        goto    morestops       ; not done yet, have stop bits
   101					
   102	0033-				gotkbdbyte
   103	0033- 0824			        movf    kbdbyte, w      ; get kbd byte
   104	0034- 0088			        movwf   portd           ; write data to CPU
   105	0035- 1005			        bcf     porta, 0        ; turn on interrupt to CPU
   106					
   107	0036- 3002			        movlw   initstopcnt
   108	0037- 00A2			        movwf   stopcnt         ; set up # of stop bits in
   109	0038- 300A			        movlw   initdatabits
   110	0039- 00A3			        movwf   databits        ; set up # of actual shifts
   111					
   112	003A- 2842			        goto    endintinterrupt ; done with sending byte
   113					
   114	003B-				morestops                       ; only stop bits left
   115	003B- 01A3			        clrf    databits
   116	003C- 0AA3			        incf    databits        ; set remaining databits to 1
PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 3

   117									; next loop through dec's databits, it's 0
   118									; skips to decfsz stopcnt
   119	003D- 2842			        goto    endintinterrupt ; finish with rb0/int interrupt
   120					
   121	003E-				gotbit                          ; shift in a bit from keyboard
   122	003E- 1403			        bsf     c               ; set carry
   123	003F- 1C86			        btfss   portb, 1        ; if kbd data bit is set, skip next
   124	0040- 1003			        bcf     c               ; clear carry
   125	0041- 0CA4			        rrf     kbdbyte, 1      ; rotate data bit into MSB of kbdbyte
   126					        ; fall through to endintinterrupt
   127					
   128	0042-				endintinterrupt
   129	0042- 1283			        bcf     rp0             ; bank 0
   130	0043- 108B			        bcf     intf            ; clear RB0/INT interrupt flag
   131	0044- 284F			        goto    finishinterrupt ; pop processor context
   132					
   133	0045-				parallelin
   134	0045- 1F86				btfss	portb, 7	; skip next if STROBE from parallel is set
   135	0046- 284A				goto	endrbinterrupt	; we don't care about high-to-low change.
   136	0047- 0807				movf	portc, w	; get parallel port in
   137	0048- 0088				movwf	portd		; send it to CPU
   138	0049- 1085				bcf	porta, 1	; turn on interrupt to CPU
   139						; fall through into endrbinterrupt
   140					
   141	004A-				endrbinterrupt
   142	004A- 1283				bcf	rp0
   143	004B- 100B				bcf	rbif
   144	004C- 284F			        goto    finishinterrupt ; pop processor context
   145					
   146	004D-				endpspinterrupt
   147	004D- 1283			        bcf     rp0             ; bank 0
   148	004E- 138C			        bcf     pspif           ; clear PSP interrupt flag
   149						; fall through into endinterrupt
   150					
   151	004F-				finishinterrupt
   152					        ; restore W and STATUS
   153	004F- 0E21			        swapf   status_temp, w  ; put old status in W
   154	0050- 0083			        movwf   status          ; put into status
   155	0051- 0EA0			        swapf   w_temp, 1       ; swap w_temp in place
   156	0052- 0E20			        swapf   w_temp, w       ; put old W into W
   157					
   158	0053- 0009			        retfie
