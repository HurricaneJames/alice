;
; Brad and Lawrence's PIC test program.
; Accepts a byte write on PORTD, increments that byte, then
; writes that byte on PORTD, then interrupts the CPU by setting A0 low
; On interrupt, clears the interrupt by setting A0 high.
;
; January 25, 1996
;
	maclib 'p64.inc'

        device  pic16c64,xt_osc,wdt_off,pwrt_off,protect_off

w_temp  equ     020h
status_temp equ 021h

reset
        org     0               ; on reset
        goto    start

intsvc
        org     4               ; on interrupt
        goto    interrupt

start
        bcf     rp0             ; bank 0
        bsf     porta,0         ; don't interrupt CPU
        bcf     pspif           ; clear PSP interrupt flag
        clrf    portc           ; nothing on our debug port

        bsf     rp0             ; bank 1
        bcf     trisa,0         ; bit 0 port A is output

        bsf     trise0          ; /RD is input
        bsf     trise1          ; /WR is input
        bsf     trise2          ; /CS is input

        clrf    trisc           ; C is all output

        bsf     pspie           ; enable PSP interrupts
        bsf     pspmode         ; enable PSP mode
        bsf     peie            ; enable peripheral interrupts
        bsf     gie             ; enable all interrupts

        bcf     rp0             ; bank 0

        bsf     portc,0         ; got here!

loop
        goto loop               ; infinite loop
                                  
interrupt
        ; save W and STATUS
        movwf   w_temp          ; save W
        swapf   status, w       ; save status in W
        bcf     rp0             ; bank 0
        movwf   status_temp     ; save status

        bsf     portc,1         ; got here!

        btfss   pspif           ; test PSP interrupt flag
        goto    endinterrupt    ; not PSP, return
        bsf     portc,2         ; got here!
        bsf     rp0             ; bank 1
        btfss   ibf             ; did we get a write?
        goto    gotread         ; nope, jump to read
        ; we got a write
        bcf     rp0             ; bank 0
        incf    portd           ; increment data port
        bcf     porta,0         ; interrupt the CPU
        bsf     portc,3         ; got here!
        goto    endinterrupt    ; return

gotread
        bcf     rp0             ; bank 0
        bsf     porta,0         ; don't assert interrupt
        ; drop into endinterrupt

endinterrupt
        bcf     rp0             ; bank 0
        bsf     portc,4         ; got here!
        bcf     pspif           ; clear PSP interrupt flag

        ; restore W and STATUS
        swapf   status_temp, w  ; put old status in W
        movwf   status          ; put into status
        swapf   w_temp, 1       ; swap w_temp in place
        swapf   w_temp, w       ; put old W into W

        retfie
