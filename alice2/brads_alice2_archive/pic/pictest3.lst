PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 1

     1					;
     2					; Brad and Lawrence's PIC Alice II keyboard test program.
     3					; Accepts a byte on B1, serially clocked in on rising edges of
     4					; B0 (1 start bit, two stop bits), writes that byte on PORTD,
     5					; then interrupts the CPU by setting A0 low.
     6					; On PSP RD interrupt, clears the interrupt by setting A0 high.
     7					;
     8					; January 25, 1996
     9					;
    10						maclib 'p64.inc'
    11					
    12					        device  pic16c64,xt_osc,wdt_off,pwrt_off,protect_off
    13					
    14	=0020				w_temp  equ     020h
    15	=0021				status_temp equ 021h
    16					
    17	=0002				initstopcnt        equ     2    ; # of stop bits per byte (+ 1)
    18	=0022				stopcnt            equ     022h ; storage for stop bits left
    19	=000A				initdatabits       equ     10   ; start bits + data bits (+ 1)
    20	=0023				databits           equ     023h ; storage for kbd data shifts left
    21					                                ; (1st bit shifted in gets pushed off end)
    22	=0024				kbdbyte            equ     024h ; storage for keyboard byte
    23					
    24	0000-				reset
    25					        org     0               ; on reset
    26	0000- 2805			        goto    start
    27					
    28	0001-				intsvc
    29					        org     4               ; on interrupt
    30	0004- 281D			        goto    interrupt
    31					
    32	0005-				start
    33	0005- 1283			        bcf     rp0             ; bank 0
    34	0006- 1405			        bsf     porta,0         ; don't interrupt CPU
    35	0007- 138C			        bcf     pspif           ; clear PSP interrupt flag
    36	0008- 0187			        clrf    portc           ; nothing on our debug port
    37					
    38	0009- 3002			        movlw   initstopcnt
    39	000A- 00A2			        movwf   stopcnt         ; set up # of stop bits in kbd data
    40	000B- 300A			        movlw   initdatabits
    41	000C- 00A3			        movwf   databits        ; set up # of actual shifts to make
    42					
    43	000D- 1683			        bsf     rp0             ; bank 1
    44	000E- 1005			        bcf     trisa,0         ; bit 0 port A is output
    45					
    46	000F- 1409			        bsf     trise0          ; /RD is input
    47	0010- 1489			        bsf     trise1          ; /WR is input
    48	0011- 1509			        bsf     trise2          ; /CS is input
    49					
    50	0012- 0187			        clrf    trisc           ; C is all output
    51					        ; don't need to set trisb, default is 0xff
    52	0013- 1701			        bsf     intedg          ; RB0/INT triggers on low-to-high
    53					
    54	0014- 178C			        bsf     pspie           ; enable PSP interrupts
    55	0015- 1609			        bsf     pspmode         ; enable PSP mode
    56	0016- 170B			        bsf     peie            ; enable peripheral interrupts
    57	0017- 108B			        bcf     intf            ; clear RB0/INT interrupt flag
    58	0018- 160B			        bsf     inte            ; enable RB0/INT interrupt
PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 2

    59	0019- 178B			        bsf     gie             ; enable all interrupts
    60					
    61	001A- 1283			        bcf     rp0             ; bank 0
    62					                                                            
    63	001B- 1407			        bsf     portc,0         ; got here!
    64					
    65	001C-				loop
    66	001C- 281C			        goto loop               ; infinite loop
    67					                                  
    68	001D-				interrupt
    69					        ; save W and STATUS
    70	001D- 00A0			        movwf   w_temp          ; save W
    71	001E- 0E03			        swapf   status, w       ; save status in W
    72	001F- 1283			        bcf     rp0             ; bank 0
    73	0020- 00A1			        movwf   status_temp     ; save status
    74					
    75	0021- 1087			        bcf     portc,1         ; got here!
    76	0022- 1487			        bsf     portc,1         ; got here!
    77					
    78	0023- 1F8C			        btfss   pspif           ; test PSP interrupt flag
    79	0024- 282F			        goto    notpsp          ; not PSP
    80	0025- 1507			        bsf     portc,2         ; got here!
    81	0026- 1683			        bsf     rp0             ; bank 1
    82	0027- 1F89			        btfss   ibf             ; did we get a write?
    83	0028- 282C			        goto    gotread         ; nope, jump to read
    84					        ; we got a write
    85					        ; don't do anything here.  Someday write to keyboard.
    86					        ; panic if you see bit 3 go up!
    87	0029- 1187			        bcf     portc,3         ; got here!
    88	002A- 1587			        bsf     portc,3         ; got here!
    89	002B- 284D			        goto    endpspinterrupt ; return
    90					
    91	002C-				gotread
    92	002C- 1283			        bcf     rp0             ; bank 0
    93	002D- 1405			        bsf     porta,0         ; don't assert interrupt
    94	002E- 284D			        goto    endpspinterrupt
    95					
    96	002F-				notpsp                          ; must be RB0/INT interrupt
    97	002F- 1287			        bcf     portc, 5        ; got here!
    98	0030- 1687			        bsf     portc, 5        ; got here!
    99	0031- 0BA3			        decfsz  databits, 1     ; skip next if done with data bits
   100	0032- 2844			        goto    gotbit          ; have a good bit on port B
   101	0033- 0BA2			        decfsz  stopcnt, 1      ; skip next if done with keyboard cycle
   102	0034- 283F			        goto    morestops       ; not done yet, have stop bits
   103					
   104	0035-				gotkbdbyte
   105	0035- 1387			        bcf     portc, 7        ; got here!
   106	0036- 1787			        bsf     portc, 7        ; got here!
   107	0037- 0824			        movf    kbdbyte, w      ; get kbd byte
   108	0038- 0088			        movwf   portd           ; write data to CPU
   109	0039- 1005			        bcf     porta, 0        ; turn on interrupt to CPU
   110					
   111	003A- 3002			        movlw   initstopcnt
   112	003B- 00A2			        movwf   stopcnt         ; set up # of stop bits in
   113	003C- 300A			        movlw   initdatabits
   114	003D- 00A3			        movwf   databits        ; set up # of actual shifts
   115					
   116	003E- 284A			        goto    endrb0interrupt ; done with sending byte
PIC Macro Assembler Version 2.52    Copyright 1995, microEngineering Labs				Page 3

   117					
   118	003F-				morestops                       ; only stop bits left
   119	003F- 1307			        bcf     portc, 6        ; got here!
   120	0040- 1707			        bsf     portc, 6        ; got here!
   121	0041- 01A3			        clrf    databits
   122	0042- 0AA3			        incf    databits        ; set remaining databits to 1
   123									; next loop through dec's databits, it's 0
   124									; skips to decfsz stopcnt
   125	0043- 284A			        goto    endrb0interrupt ; finish with rb0/int interrupt
   126					
   127	0044-				gotbit                          ; shift in a bit from keyboard
   128	0044- 1207			        bcf     portc, 4        ; got here
   129	0045- 1607			        bsf     portc, 4        ; got here
   130	0046- 1403			        bsf     c               ; set carry
   131	0047- 1C86			        btfss   portb, 1        ; if kbd data bit is set, skip next
   132	0048- 1003			        bcf     c               ; clear carry
   133	0049- 0CA4			        rrf     kbdbyte, 1      ; rotate data bit into MSB of kbdbyte
   134					        ; fall through to endrb0interrupt
   135					
   136	004A-				endrb0interrupt
   137	004A- 1283			        bcf     rp0             ; bank 0
   138	004B- 108B			        bcf     intf            ; clear RB0/INT interrupt flag
   139	004C- 2851			        goto    finishinterrupt ; pop processor context
   140					
   141	004D-				endpspinterrupt
   142	004D- 1283			        bcf     rp0             ; bank 0
   143	004E- 1207			        bcf     portc,4         ; got here!
   144	004F- 1607			        bsf     portc,4         ; got here!
   145	0050- 138C			        bcf     pspif           ; clear PSP interrupt flag
   146					
   147	0051-				finishinterrupt
   148					        ; restore W and STATUS
   149	0051- 0E21			        swapf   status_temp, w  ; put old status in W
   150	0052- 0083			        movwf   status          ; put into status
   151	0053- 0EA0			        swapf   w_temp, 1       ; swap w_temp in place
   152	0054- 0E20			        swapf   w_temp, w       ; put old W into W
   153					
   154	0055- 0009			        retfie
