                                     
                                     
                                     
                                     
                                     
                                     
                                     
                            PIC Macro Assembler
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                                     
                           microEngineering Labs














Copyrights and Trademarks
                                     
Copyright (c) 1996, microEngineering Labs.

Parallax is a trademark of Parallax, Inc.
PIC is a Registered Trademark of Microchip Technology, Inc.



Disclaimer of Liability

microEngineering Labs is not responsible for special, incidental, or
consequential damages resulting from any breach of warranty, or under any
legal theory, including lost profits, downtime, goodwill, damage to or
replacement of equipment or property, or any costs for recovering,
reprogramming, or reproducing any data used with microEngineering Labs'
products.



                             TABLE OF CONTENTS
                                     

1. Assembler Overview                                      1

2. Command Line Options                                    5
  2.1. Usage                                              5
  2.2. The PM Environment Variable                        7
  2.3. Options                                            9
     2.3.1. Option -C                                     13
     2.3.2. Option -D                                     14
     2.3.3. Option -ELext                                 15
     2.3.4. Option -EMext                                 15
     2.3.5. Option -EOext                                 15
     2.3.6. Option -ESext                                 15
     2.3.7. Option -EIext                                 18
     2.3.8. Option -G#                                    19
     2.3.9. Option -Ipath                                 20
     2.3.10. Option -Lname                                21
     2.3.11. Option -OB                                   22
     2.3.12. Option -OH                                   23
     2.3.13. Option -Q                                    24

3. Pseudo-Ops                                             25
  3.1. CODE                                              26
  3.2. DATA                                              27
  3.3. EEPROM                                            29
  3.4. ABS                                               30
  3.5. ORG                                               32
  3.6. DS                                                33
  3.7. DB                                                34
  3.8. DW                                                36
  3.9. EQU                                               37
  3.10. =                                                37

4. Conditional Assembly                                   39
  4.1. IF                                                40
  4.2. ELSEIF                                            40
  4.3. ELSE                                              40
  4.4. ENDIF                                             40
  4.5. IFDEF                                             44
  4.6. IFNDEF                                            44
  4.7. IFB                                               46
  4.8. IFNB                                              46

5. Macro Facility                                         49
  5.1. REPT                                              50
  5.2. IRPC                                              52
  5.3. IRP                                               54
  5.4. MACRO                                             56
  5.5. LOCAL                                             58
  5.6. EXITM                                             59
  5.7. ENDM                                              60

6. File Controls                                          61
  6.1. INCLUDE                                           62
  6.2. MACLIB                                            64

7. File and Listing Controls                              67
  7.1. TITLE                                             68
  7.2. PAGE                                              69
  7.3. LIST                                              71
  7.4. NLIST                                             71
  7.5. MTLIST                                            73
  7.6. NMTLIST                                           73
  7.7. CLIST                                             75
  7.8. NCLIST                                            75
  7.9. LALL                                              77
  7.10. XALL                                             77
  7.11. SALL                                             77

8. Device Controls                                        79
  8.1. DEVICE                                            80
     8.1.1. Fuse Specifier                                81
     8.1.2. Core Specifier                                90
     8.1.3. Reserved Options                              94
  8.2. ID                                                95
  8.3. RESET                                             97

9. Expressions                                            99
  9.1. Calculations                                      99
  9.2. Operators                                        100
     9.2.1. Bit Extension                                109
     9.2.2. Modulus                                      110
     9.2.3. Shift Right                                  111
     9.2.4. DEF & REF                                    112
  9.3. Numeric Constants                                113
  9.4. String Constants                                 115
  9.5. List Quoting                                     117
  9.6. Identifiers                                      121
     9.6.1. Identifiers Starting with ':'                123
     9.6.2. Identifiers Starting with '$'                124
     9.6.3. Identifiers Starting with '_'                124
     9.6.4. Identifiers Starting with '@'                125
  9.7. System Variables                                 126
     9.7.1. $                                            126
     9.7.2. DEVICE                                       127

10. File Formats                                         129
  10.1. Source File                                     129
  10.2. Map File                                        132
  10.3. Binary Output File                              133
  10.4. Merged Intel HEX File                           134
     10.4.1. PIC16C5x Device Descriptor                  136
     10.4.2. PIC16Cxx Device Descriptor                  140
  10.5. Symbol Table File                               144
  10.6. Listing File                                    147

11. Assembling Existing Parallax Code                    153

12. Warnings                                             163

13. Errors                                               169

14. Fatal Errors                                         195

15. Internal Errors                                      203



 Assembler Overview

Compatibility
     Microchip & Parallax Instruction Sets
     Microsoft Compatible Macros
     Supports all 12-bit (16C5x) and 14-bit (16Cxx) PICs

Operation
     Two-Pass Assembly
     Operator precedence in evaluation of expressions
     Conditional Assembly
     Listing Controls
     Separate Code, Data and EEPROM Segments

Symbol Names
     Symbols up to 32 of the following characters :
          :  @  $  _  A-Z  0-9
     First character must be legal character other than 0-9.
     Special Uses :
          $   Reserved for Debugger Commands
          _   Reserved for Compilers
          @   Temporary Labels
          :   Local Labels
     Case sensitivity is optional.
     Program labels must begin in column 1.
     Non-labels must not begin in column 1.

Numbers
     Default Radix is 10. All numbers must begin 0-9. An alternate radix
     may be selected with one of the following suffixes :
          B Binary
          O Octal
          H Hexadecimal
     Radix suffixes are not case sensitive. All numbers are kept in 32-bit
     two's complement form (-231 to 231-1).

Strings
     Strings are enclosed by a matching pair of single or double quotes. No
     string operations are allowed.

_ Command Line Options


 Usage

PM can be invoked from the DOS command line using the following command
format :

       
       PM Options filename

Zero or more options can be used to modify the manner in which the
assembler processes the input file. Options begin either with a slash
( '/' ) or a minus ( '-' ). The character following the minus is a letter
which selects the option. Additional characters may be needed by some
options to supply additional information. No spaces may occur within an
option. Options not recognized by the assembler will generate errors and be
ignored.

The first parameter not starting with a minus or a slash is assumed to be
the filename. Extra parameters are ignored.

If PM is invoked with no options and no filename, a brief help screen is
displayed.


 The PM Environment Variable

With programming tools, a programmer will often want certain options to be
invoked consistently. This usually requires the programmer to invoke these
options each time the tools is used. While batch files and makefiles can
reduce this tedium, problems can also occur due to DOS limits on the length
of command lines.

In order to alleviate these problems, the assembler uses a DOS environment
variable named PM. This contains a string of command line options which are
implicitly selected whenever the assembler is invoked. It uses the same
format as the options selected on the command line. Once these have been
processed, then normal command line options are processed and the file is
assembled. Thus, you can use PM to override the assembler defaults and then
use the command line to override PM defaults. This allows a great deal of
customization to the assembler.

For example, suppose you want the PIC Macro Assembler to look more like the
original Parallax assembler. No problem - simply add the following to your
AUTOEXEC.BAT :

     set PM=-EOOBJ

This changes the extension of the output filename from 'HEX' to 'OBJ'.


 Options

Option       Option Description
  C    Identifiers to be Case
       Sensitive
  D    Generates Listing, Symbol
       Table, and Map File
Ecext  Sets filename extension for
       specified file type
       L = Listing File
       M = Map File
       O = Output File
       I = Input File
       S = Symbol Table
  G#   Set maximum error count
Ipath  Set default INCLUDE/MACLIB
       directory
Lname  Generate listing (listing
       filename is optional)
  Of   Set output format
       B = Binary
       H = Merged Intel HEX
  Q    Force use of explicit extension
       of source filename

 Option -C

By default, all items in PM are case insensitive. Thus, MIXED, Mixed,
mixed, and mIXEd would all be treated as the same label or macro. When the
-C option is invoked, identifiers are case sensitive. In this mode, the
sample identifiers would all be treated as unique. In either mode, opcodes
and pseudo-ops are always case insensitive. This mode is generally intended
for use by compilers where case is important (such as C).

 Option -D

PM normally assembles a source file and outputs an executable equivalent of
the program. When the -D option is invoked, a listing, a map and a symbol
table are also generated. This options is mainly used to generate
information for debuggers.

 Option -ELext
 Option -EMext
 Option -EOext
 Option -ESext

The names for listing, map, output and symbol table files are generated
automatically by the assembler. These names are created by taking the base
name of the source file (up to 8 characters) and appending an extension
indicating file type. The default extensions are :

File Type      Default
              Extension
 Listing         LST
   Map           MAP
  Output     HEX or BIN
  Symbol         SYM
  Table

These files are placed in the current directory. The -E options allows
these default extensions to be changed. If the specified default is longer
than 3 characters, it is truncated without warning or error. This option
can be used to make the outputs of PM easier to use with various debugging
platforms.

 Option -EIext

Whenever the assembler is invoked, it checks the name of the source file
for an extension. If one is explicitly defined, it is used. If none is
defined, then the assembler appends a default input extension to the
filename. By default, this extension is SRC. The -EI option can be used to
change this default to any three letter combination. If the specified
default is longer than 3 characters, it is truncated without warning or
error.

The -Q option can be used to force the programmer to always specify the
filename extension, if any. Thus, -Q negates the use of the -EI option.

 Option -G#

PM can generate an unlimited number of warning. For the sake of clarity,
however, it limits the number of errors that can be generated. By default,
PM terminates with a fatal error if 15 or more errors occur. Using the -G
option, this value may be changed to any arbitrary number.

 Option -Ipath

Whenever the assembler encounters an INCLUDE or MACLIB directive, a search
is conducted for the specified file. If a path is explicitly specified,
that directory is searched. If the file is not found, a fatal error is
generated.

If no path is specified, the file is first sought in the current directory.
If not found there, then the system header directory is searched. By
default, this directory is the INC subdirectory of the directory from which
PM is executed. If also not found here, a fatal error is generated.

The -I option can be used to specify the new path of this default
directory. When invoked, the path specified by the -I option is not checked
for validity. Thus, specifying a non-existent or erroneous path can cause
header files to seem to mysteriously disappear (i.e. the assembler can't
find them because the directory doesn't exist).

 Option -Lname

When used, the -L option causes the assembler to generate a listing file in
addition to the normal executable image generated. When used by itself, the
listing is placed in a file whose name is created by appending the listing
extension (default is LST) to the base name of the source file. If the -L
options is used to specify a filename, the listing is generated to the
named file.

Note that even if the -D option (which by default generates a listing) is
used, the -L option can still be valuable, because it allows you to specify
the name and path of the listing file.

 Option -OB

By default, PM generates Merged Intel HEX format for the executable image.
The -OB option allows the assembler to generate 16-bit binary format.

 Option -OH

The -OH option forces PM to generate the executable image in the Merged
Intel HEX format. This option is mainly useful to override the use of the -
OB option that might be specified in the PM environment variable.

 Option -Q

Normally, when no extension is explicitly specified for the source, PM
appends a default extension to the filename (SRC by default). The -Q option
prevents this and forces the programmer to explicitly define the extension
(if any) of the source filename.

_ Pseudo-Ops


 CODE
       
       CODE [ Expr ]

The code segment manages the program space of the PIC. The CODE pseudo-op
selects the code segment as the current segment. All bytes generated in the
code segment are placed in the executable image file. The optional
expression may be used to set the load pointer for the code segment.


 DATA
       
       DATA [ Expr ]

The data segment manages the RAM space of the PIC. The DATA pseudo-op
selects the data segment as the current segment. Generation of code or
initialized data in this segment results in an error (due to the Harvard
architecture of the PIC). Thus, DS is the only usable pseudo-op in the data
segment. The optional expression may be used to set the load pointer for
the data segment.


 EEPROM
       
       EEPROM [ Expr ]

The EEPROM segment manages the EEPROM space available in the 8x family of
PICs. The EEPROM pseudo-op selects the EEPROM segment as the current
segment. Generation of code in this segment results in an error (due to the
Harvard architecture of the PIC). Thus, DS, DB and DW are the only usable
pseudo-ops in the EEPROM segment. The optional expression may be used to
set the load pointer for the EEPROM segment.


 ABS
       
       ABS [ Expr ]

Sets the current segment to the absolute segment. This is the default
segment and operates in the mode most familiar to programmers as "absolute"
assembly. All bytes generated in this segment are placed in the executable
image file. The DS command merely advances the load pointer. The optional
expression may be used to set the load pointer for the absolute segment.


 ORG
       
       ORG  Expr

Sets the load pointer for the current space. The user may get the current
value of the load pointer for the current segment via the system variable
$.


 DS
       
       DS  Expr

Advances the load pointer by the specified value. DS is normally used to
allocate space within the data or EEPROM segments. When used in the EEPROM
segment, no data is generated in the HEX file for the allocate locations.
This allows EEPROM locations to be allocated that will not be programmed
(assuming your programmer doesn't unconditionally program all EEPROM
locations).


 DB
       
       DB(Expr|String) { , (Expr|String) }

Stores one or more constant bytes in the current segment. In the case of
numeric constants, the resulting values (truncated to 8 bits, if necessary)
are stored. String constants are stored as consecutive bytes.

Since the PIC cannot store data in the code space directly, each byte
generated in the code segment is actually stored as a RETLW instruction.
Bytes generated in the EEPROM segment are stored merely as data. And, of
course, bytes generated to the data segment result in errors.


 DW
       
       DW Expr { , Expr }

Stores the resulting value in the current segment. The value is truncated
to 16-bits. The least significant byte is stored first. Each byte is
generated in the same manner as the DB pseudo-op.


 EQU

 =
       
       Label  EQU  Expr
       
       Label  =   Expr

Assigns a numeric value to the specified symbol. The two operations are
similar, except it is an error to redefine a symbol created using the EQU
pseudo-op. Symbols created using the = may be reassigned value without
error.

_ Conditional Assembly

Note: PM requires that all symbols be defined at the end of the first pass.
In order to meet this requirement, the evaluation of all conditional
assembly constructs must be consistent in both passes. Thus, unlike other
assembler features, conditional assembly may not assemble correctly if it
relies on forward references.


 IF

 ELSEIF

 ELSE

 ENDIF
       
       IF    Expr
       
           ...
       
       ELSEIF Expr
       
           ...
       
       ELSE
       
           ...
       
       ENDIF

Assembly continues following the first true (i.e. non-zero) expression in
the series of IF and ELSEIF statements and continues until the next
statement in the IF..ELSE..ENDIF chain. If no statement is true and an ELSE
statement is present, the code between ELSE and ENDIF is assembled. The IF
and ENDIF terms are mandatory. One ELSE and multiple ELSEIF terms are
optional.


 IFDEF

 IFNDEF
       
       IFDEF  Label
       
       IFNDEF Label

The IFDEF and IFNDEF statements may be substituted for the IF term in the
IF..ELSE..ENDIF construct. IFDEF evaluates true if the specified symbol is
defined. IFNDEF evaluates true if the specified symbol is not defined.
There are no IFDEF/IFNDEF replacements for the ELSEIF statement.

The DEF operator may be used for more complicated variations on the
IFDEF/IFNDEF pseudo-ops.


 IFB

 IFNB
       
       IFB  [ Item ]
       
       IFNB [ Item ]

The IFB and IFNB statements may be substituted for the IF term in the
IF..ELSE..ENDIF construct. IFB evaluates true if an item is listed on the
line following the IFB statement. IFNB evaluates true if no item is listed
on the line following the IFNB statement. There are no IFB/IFNB
replacements for the ELSEIF statement.

Comments are treated as blanks in the evaluation of IFB and IFNB
statements. These constructs are mainly useful in macros to test whether a
parameter has been specified by the caller or has been omitted.

_ Macro Facility


 REPT
       
       REPT Expr
       
       Body
       
       ENDM

The body of the macro is repeated the number of times specified by the
numeric expression. The REPT macro is executed immediately.


 IRPC
       
       IRPC Param , String
       
       Body
       
       ENDM

The body of the macro is repeated once for each character in the specified
string. The specified parameter is substituted on each expansion with the
scanned character. The IRPC macro is executed immediately.


 IRP
       
       IRP  Param , < Expr { , Expr } >
       
       Body
       
       ENDM

The IRP macro is similar to the IRPC macro, except that items from the
specified list (bracketed with < and >) are substituted for the specified
parameter. The IRP macro is executed immediately.


 MACRO
       
       Label  MACRO  Param { , Param }
       
             Body
       
             ENDM

Unlike other macro types, MACRO merely creates a template for later macro
expansions. MACRO accepts up to 32 identifiers as parameters. Whenever
found in the body (even in quotes), these parameters are substituted with
the value specified when the macro is invoked. Macros are invoked just as
any other pseudo-op or opcode. Parameters specified in the definition but
not assigned values when invoked are left unsubstituted. This allows macros
with a variable number of parameters if used with the IFB and IFNB
conditional assembly constructs.

Since a macro's name is a label, it must begin in column 1.


 LOCAL
       
       LOCAL  Symbol { , Symbol }

Allows the creation of local symbols in any macro type. A unique temporary
symbol is created for each local symbol for every expansion of the macro's
body. Any number of LOCAL statements may be defined, but they must
immediately follow the macro definition (REPT, IRPC, IRP or MACRO pseudo-
op). Local symbols take the form @@NNNN, where NNNN is a four digit decimal
number assigned sequentially from 0000.


 EXITM

Allows premature abortion of macro expansion. This is useful for
implementing loops whose lengths are not determinant.


 ENDM

All macro definitions are terminated by the ENDM pseudo-op.

_ File Controls


 INCLUDE
       
       INCLUDE String

The INCLUDE statement is replaced with the contents of the specified file.
If no path is specified, the file is searched for first in the current
directory. If not found, then the system header directory is searched. If
still not found, an error results.

By default, the system header directory is the INC subdirectory of the
directory from which PM.EXE is executed. This directory contains files
defining important constants and macros for each of the PICs supported.
This can be changed by the use of the -I command line option.


 MACLIB
       
       MACLIB String

MACLIB is identical in operation to INCLUDE, except that the file is only
parsed on the first pass. This is intended for use on include files that
contain only macro and symbol definitions.

Avoid the use of MACLIB if the file includes any opcodes. If used on such a
file, the file will affect assembly on the first pass, but not on the
second. This can create major discrepancies in the second pass of assembly
and usually results in a large number of confusing error.

_ File and Listing Controls


 TITLE
       
       TITLE  String

Specify the title at the top of every page in listing file.


 PAGE
       
       PAGE   Expr , Expr
       
       PAGE   Expr
       
       PAGE

If the first parameter is defined, it sets the page width for the listing.
The page width must be between 80 and 255 characters (default is 132).
Characters beyond this width are truncated from the listing. If the second
parameter is defined, it sets the page length of the listing (default is
60). If the page length is set 0, no automatic page breaks are generated.

If the PAGE pseudo-op is used without parameters, if forces a page break in
the listing.


 LIST

 NLIST

If the -L option is used, the listing counter is initialized to 1.
Otherwise, it defaults to an initial value of 0. LIST increments the
listing counter. NLIST decrements the listing enable counter. Whenever the
listing counter is positive, lines are generated for the listing.

This simple arrangement allows a greater flexibility in listing control
than did earlier versions of PM. For example, the source file may contain
listing controls without unconditionally generating a listing.


 MTLIST

 NMTLIST

If the MTLIST pseudo-op is used, enough lines are generated to display all
bytes generated by the listed statement. This is the default.

If the NMTLIST is pseudo-op is used, only one line is listed for each line
of source code. If a line generates more than 4 words of code, additional
bytes are not displayed and the line is marked with an '#'.


 CLIST

 NCLIST

The NCLIST pseudo-op forces all portions of IF..ELSE..ENDIF constructs to
be listed. This is the default.

The NCLIST pseudo-op forces only those portions of IF..ELSE..ENDIF
constructs that are assembled to be listed. The conditional statements
themselves are always listed, although nested IF..ELSE..ENDIF constructs in
unassembled blocks of code are not listed.


 LALL

 XALL

 SALL

If LALL pseudo-op is used, all lines of a macro expansion are listed. This
is the default.

If XALL pseudo-op is used, only those lines of a macro expansion which
generate code are listed.

If SALL pseudo-op is used, no lines of a macro expansion are listed.

_ Device Controls

PM was written to be compatible with all 12-bit and 14-bit PICs. The
assembler was designed to handle the architectural limits of both core
types. Each program must specify which core and a specific set of
capabilities by using the DEVICE statement.


 DEVICE
       
       DEVICE Expr { , Expr }

The DEVICE pseudo-op takes one or more comma separated 32-bit expressions
as parameters. The bits 31 and 30 of each value distinguishes one of four
separate processor specifications. These two bits determine how the
remaining thirty bits of that value are interpreted.

 Fuse Specifier

                                     

If the upper two bits of a parameter are 00, this word defines the
configuration fuses. PM allows arbitrary control of a 14-bit fuse word.
When a fuse specifier is used, two actions are taken:

  The current fuse value is ANDed with the upper 16-bits of the 32-bit
  word.
  The resulting fuse value is then ORed with the lower 16-bits of the
  32-bit word.

This system allows one or more values to be chained together to control
various bit locations in the fuses. These may occur in any order or even in
multiple DEVICE statements. The actual values used to set the fuses are
normally defined in the header file defined for a particular component or
family of components. Below is a partial table containing the most common
fuse specifiers. For a full list, consult the device header for your
particular device.

   DEVICE           Description
  Parameter
   RC_OSC          RC Oscillator
   HS_OSC          HS Oscillator
   XT_OSC          XT Oscillator
   LP_OSC          LP Oscillator
   BOD_ON       Brown-Out Detection
                      Enabled
   BOD_OFF      Brown-Out Detection
                     Disabled
 PROTECT_ON       Code Protection
                      Enabled
 PROTECT_OFF      Code Protection
                     Disabled
   WDT_ON         Watch Dog Timer
                      Enabled
   WDT_OFF        Watch Dog Timer
                     Disabled

   Core Specifier

                                     

The core specifier defines the processor's core type (12-bit or 14-bit) and
the amount of ROM/EEPROM available. This information is needed to generate
core-appropriate instructions and to perform range checking on addresses.

Additionally, an arbitrary 8-bit numeric code may be assigned to the
processor. While PM doesn't use this information, it is embedded in the
output file and this information is used by some simulators, programmers,
and other third party development tools. There is no standardization (among
tool providers) on these numbers.

No attempt is made to provide RAM availability information. The asymmetry
of data pages makes it difficult to perform error checking without
generating warnings on valid instructions.

Unlike fuse specifiers, a core specifier must be set in one value - it
lacks the running accumulation effect of fuse specifiers.

 Reserved Options

The two remaining DEVICE fields (10 and 11) are reserved for future use.
Any DEVICE value containing these upper 2 bits will generate an error.


 ID
       
       ID  Expr
       
       ID  String
       
       ID  CHECKSUM

Each PIC has a 16-bit (12-bit core) or 28-bit (14-bit core) ID. This value
can be set in one of three methods. A numeric expression or string constant
can be used for either core type. For 12-bit cores only, the reserved word
CHECKSUM may be used. This forces the Parallax PIC Programmer to compute
the checksum of the PIC code space.


 RESET
       
       RESET  Expr

Each time a PIC is powered up or reset, the PC is set to a determinant
spot. It is assumed that the programmer will use this knowledge to get his
program to start executing whenever the PIC is ready. The most common
method of doing this is to place a GOTO instruction at this spot. In the
12-bit core, execution begins with the last word of ROM. In the 14-bit
core, execution begins at 0000h.

The RESET pseudo-op places a GOTO at the correct address determined for the
current processor type (as set by the DEVICE pseudo-op). The RESET command
is most commonly used in programs for 12-bit cores.

_ Expressions


 Calculations

Even though PIC processors only handles 8-bit math and use 11-bit or 13-bit
addresses, PM performs all calculations and stores all constants 32-bit,
two's complement form.

No string operations are available.


 Operators

Operator      Function      Unar  Preceden
                             y       ce
  ( )         Grouping       x       1
             Operators
  REF     Label Reference    x       2
  DEF      Label Defined     x       2
   -        Unary Minus      x       2
   +         Unary Plus      x       2
   ~        Bitwise NOT      x       2
   !        Logical NOT      x       2
   HI       MSB of Word      x       2
   LO       LSB of Word      x       2
   *          Multiply               3
   /           Divide                3
   %          Modulus                3
   >>       Shift Right              4
   <<        Shift Left              4
   -          Subtract               5
   +          Addition               5
   =        Equivalence              6
   <>        Inequality              6
   <         Less Than               6
   >        Greater Than             6
   <=       Less Than or             6
               Equal
   >=     Greater Than or            6
               Equal
   &        Bitwise AND              7
   ^        Bitwise XOR              8
   |         Bitwise OR              8
   .        Bit Address              9
              Operator

Expressions are resolved from left to right using operator precedence to
resolve ambiguities in evaluation. The precedence of each operator is
shown. Operators with the highest precedence (i.e. those which are
evaluated first) are show as precedence 1.

 Bit Extension

Whenever bits in a number are inverted, this inversion occurs in all 32
bits. This causes the bit-wise inversion and negation of byte-sized numbers
with 1's in the upper bits. This, however, isn't usually a problem, since
opcodes usually truncate calculated values to the appropriate size without
generating warnings or errors.

 Modulus

Modulus is the proper name for what you may have learned in school as the
"remainder". In short, it is value that is "left over" when one integer
value is divided by another. In systems which support signed numbers, there
is some ambiguity as to the sign of the remainder for negative numbers. PM
returns a modulus with the same sign as the dividend.

 Shift Right

Shift right is often used as a fast-divide for binary values (e.g. shifting
right by 3 bits is the same as dividing by 8). Since PM works with signed
numbers, a number shifted right will retain the value of the 32nd bit (i.e.
sign extension).

 DEF & REF
       
       DEF ( LabelList )
       
       REF ( LabelList )

In order to allow PM to simulate a linking library, the DEF and REF
operators are defined. The DEF operator returns true (1) if the specified
label(s) have been defined earlier in the program. Similarly, the REF
operator returns true (1) if the specified label(s) have been used
(referenced) earlier in the program. Both return 0 if the tested condition
is false.

To increase flexibility, more than one label may be tested. In fact,
logical operators ('|' for OR and '&' for AND) and parenthesizes have are
supported for complex label lists.


Numeric Constants

All numbers default to radix 10. All numbers (regardless of radix) must
begin with digits 0-9. Other bases may be selected by appending the
following suffixes. Suffixes are not case sensitive.

B    Binary
O     Octal
H   Hexadecimal


 String Constants

PM supports string constants mainly for the purpose of generating strings
of RETLWs (via the RETW opcode and DB pseudo-op). Strings may be enclosed
by either single ( ' ) or double ( " ) quotes. If single quotes are used,
then double quotes may be used freely within the string, and vice versa.
Single quotes may not appear within a single quoted string and double
quotes may not appear within a double quoted string.

String constants may also be used to drive the IRPC macro pseudo-op. On
each expansion of the IRPC macro, the replacement parameter is replaced
with an unquoted character. When used as a parameter for macros defined
using the MACRO pseudo-op, the quoted string is passed unmodified (quotes
intact).


 List Quoting

The IRP macro is driven by a list of comma separated items bracketed with <
and > characters. This item can be so useful, that < and > have been given
a special "quoting" function in macros. When the < character is encountered
in the parameter list for a macro defined using the MACRO pseudo-op, the
parameter is considered to contain all characters up to the next >. This
type of bracketing may not be nested. When this parameter is substituted,
the < and > are stripped from the substitution.

 1                defb1  macro       list
 2                       irp  item,<list>
 3                       db   item
 4                       endm
 5                       endm
 6
 7                defb2  macro       list
 8                       db   list
 9                       endm
10
11                       defb1       <1,"One",2,"Two">
 +                       irp  item,<1,"One",2,"Two">
 +                       db   item
 +                       endm
 + 000- 801              db   1
 + 001- 84F 86E 865           db     "One"
 + 004- 802              db   2
 + 005- 854 877 86F           db     "Two"
12                       defb2       <1,"One",2,"Two">
 + 008- 801 84F 86E 865       db     1,"One",2,"Two"
   00C- 802 854 877 86F


 Identifiers

Identifiers are the names used as program labels, variables and macro
names. Although they can be any length, only the first 32 characters are
significant and they must be unique in these 32 characters. Identifiers
differing only in the 33rd or later character are considered identical.
Identifiers consist of any of the following characters :

                             A-Z  0-9  : @ $ _

Identifiers may begin with any of these characters except 0-9. The first
character may have a special meaning, as described in the following
sections.

 Identifiers Starting with ':'

Symbols starting with a colon ( ':' ) are local symbols. This method
appends this local label to the last non-local label (i.e. label beginning
with other than a colon). This allows simple labels within a global block
not to pollute valuable name space. The labels can be referenced within
this local block using the abbreviated local name. To reference this label
outside the block, the full form needs to be used (i.e. non-local:local).

 Identifiers Starting with '$'

Symbols starting with the dollar sign ( '$' ) are reserved for future
debugging use. Currently, only one symbol starting with the dollar sign is
reserved by the assembler, which is the dollar sign itself. It is used to
get the value of the load pointer for the current segment.
     
 Identifiers Starting with '_'

Symbols starting with the underscore ( '_' ) are reserved for use by
compilers.

 Identifiers Starting with '@'

Symbols starting with the at symbol ( '@' ) are treated as temporary
labels. Temporary symbols are treated just like other labels, except they
are not included in the symbol table. The LOCAL pseudo-op generates symbols
in the form of @@NNNN, where NNNN is a four digit decimal number starting
with 0000.


 System Variables

In order to make programming easier, PM defines some system variables. You
cannot redefine these variables, although they can be used as you would
other variable.

 $

The dollars sign ( $ ) is used to get the value of the load pointer for the
current segment. Each of the four segments (CODE, DATA, EEPROM and ABS) has
its own load pointer. Therefore, the value of $ depends on the segment in
which it appears.
     
 DEVICE

DEVICE returns the core specifier. For details on these flags, see the
description of the DEVICE pseudo-op.


_ File Formats


 Source File

; Test File for PIC Macro Assembler

     include        'T13.INC' ; Show Include File

SIZE equ   10h      ; Show Assignment Statement
     mac   "uChip"  ; Show Macro Expansion

     nmtlist          ; Suppress Multi Line Listing
     db    "uChip"  ; Generate Constants
     mac   "uChip"  ; Expand & Generate Constants

PM uses a common collimated format for the input (or source) file. This is
the same format as used by the original Parallax PIC assembler. Items
starting in column 1 are either labels, variables, or macro names. Items
beginning in column 2 or later are assumed to be opcodes or pseudo-ops.
Depending on the opcode or pseudo-op, zero or more comma separated
parameters may follow the opcode/pseudo-op. Comments (which begin with a
semicolon) may begin in any column.


 Map File

The MAP file is used to link the executable file to the source file. The
MAP file contains one 16-bit number (2 bytes) for each word in the code
space of the target processor. This 16-bit number (stored LSB first) is the
number of the line in the source file which generated the corresponding
instruction in the executable image. No provisions are made for mapping
instructions on to lines in generated in INCLUDE or MACLIB files.


 Binary Output File

The simplest output format of PM is the 16-bit binary format. The binary
file contains one 16-bit word (2 bytes) for each word in the code space of
the target processor. This word (stored LSB first) contains the actual PIC
opcode for the corresponding address (i.e. the first word of the file
corresponds to address 000h in the target processor). The most significant
bits of the word which are unused by the processor (4 in the 12-bit core, 2
in the 14-bit core) are zeroed. Addresses not assigned values by the
assembler are stored with all 1's (0FFFh in the 12-bit core, 3FFFh in the
14-bit core).


 Merged Intel HEX File

The default output format of PM is the Merged Intel HEX format. This
section will not describe the standard Intel HEX format (which is well
documented elsewhere), but details the deviations from the standard for the
Merged format.

Each word of the executable image is stored in consecutive bytes in the
Intel format (LSB first). To adjust for the 2-byte word size of the PIC,
the Intel HEX addresses are doubled (since the format is strictly byte
oriented). With these two adjustments made, the Merged Intel HEX format is
identical to the standard Intel HEX format.

Unlike the binary format, only bytes which are actually generated have any
value specified in the Merged Intel HEX format. If some fill value is
required, this must be handled by your PIC programmer.

Unlike the binary file format, the Merged Intel HEX format also contains
information on the processor type, ID/checksuming flag and the fuses.

 PIC16C5x Device Descriptor
     
                                     

The device descriptor for the PIC16C5x family is shown above. The checksum
flag (2 bytes) is 0000 if no checksum is to be calculated and 0001 is the
checksum is to be calculated. The ID field contains the 16-bit ID (LSB
first) as specified by the ID pseudo-op. The ID is FFFF if the checksum for
the PIC is to be calculated (i.e. Checksum = 0001). The processor numbers
for the PIC16C5x family are as follows :

00 PIC16C54
01 PIC16C55
02 PIC16C56
03 PIC16C57
04 PIC16C58

For details on the fuses field, see the description of the DEVICE
pseudo-op.

 PIC16Cxx Device Descriptor
     
                                     

00 PIC16C71
01 PIC16C84
02 PIC16C64
03 PIC16C74

 
  Symbol Table File

   a_abs                 0000000A
   a_code        CODE    0000000A
   a_data        DATA    0000000A
   a_eeprom      EEPROM  0000000A
   x_abs                 00000000
   x_code        CODE    00000000
   x_data        DATA    00000000
   x_eeprom      EEPROM  00000000

The symbol table contains all labels (except labels starting with the '@'
character) defined in the program. This file contains three unlabeled
columns. The first column contains the actual name of the symbol. The case
of the defining instance is preserved and only the first 32 significant
characters are displayed. The second column may contain the label's type
(CODE, DATA or EEPROM). This is determined by the segment in which the
label was defined. No type is generated for the ABS segment, which is the
default. Finally, the last column contains the full 32-bit representation
of the number in hexadecimal. Note that base-16 is understood and no 'H'
suffixes or '0x' prefix has been included. Symbols are listed in
alphabetical order.

This format is intended for use by debuggers and is not really made human
readable. While the items currently begin in fixed column, this may change
in the future. Those parsing these items should rely on the use of
whitespace as separators, rather than column numbers. Additional fields
(columns) may be added to the end of each line in the future, so those
processing this format should ignore items occurring after the value.
 
  Listing File

 1                ; Test File for PIC Macro Assembler
 2
 3                       include     'T13.INC'
*1                mac    macro p
*2                       db    'p'
*3                       endm
*4                       mac   "uChip"
 + 000- 822 875 843 868        db    '"uChip"'
   004- 869 870 822
 4
 5 =0010          SIZE   equ   10h
 6                       mac   "uChip"
 + 007- 822 875 843 868        db    '"uChip"'
   00B- 869 870 822
 7
 8                       nmtlist
#9 00E- 875 843 868 869        db    "uChip"
10                       mac   "uChip"
#+ 013- 822 875 843 868        db    '"uChip"'

The listing file gives the programmer the most information about the actual
assembly of the source file, and is therefore the most complex. This file
contains three columns of assembly information followed by the source code.

The first column of the listing is a single character which gives
additional information about the line being listed. The following table
shows these tag characters. While multiple tags might apply to a single
line, only one is listed. Thus, they are listed below in order of
preference :

 #   More than 4 Words Generated,
     but Suppressed
 *   Line is from Include File
     Normal Source Line

The second column displays the line number. If the current line is from an
included file, the number of that line within the include file is listed.
If the current line is generated by a macro expansion, the line number is
replaced with a '+'.

The last column displays the results of the line. If the line computes a
value for a label or as the parameter for a pseudo-op, then the value is
display either as a 4 or 8 hexadecimal digit number following an '='. If
the line generates code, the current load pointer is displayed, followed by
'-' and one or more lines of up to 4 words per line. For comments and many
pseudo-ops, this column is left blank.

_ Assembling Existing Parallax Code

For the most part, PM will assemble existing Parallax code (previously
assembled w/ PASM, PASM71 or PASMX) with little or no change. The following
steps may be needed :

  Depending on the type of PIC, place the following line in the source
  prior to any lines of code :

  PIC16C5x  MACLIB
            'P5X.INC'
  PIC16C61  MACLIB
            'P61.INC'
  PIC16C62  MACLIB
            'P62.INC'
  PIC16C62  MACLIB
  x         'P62x.INC'
  PIC16C63  MACLIB
            'P63.INC'
  PIC16C64  MACLIB
            'P64.INC'
  PIC16C65  MACLIB
            'P65.INC'
  PIC16C70  MACLIB
            'P70.INC'
  PIC16C71  MACLIB
            'P71.INC'
  PIC16C72  MACLIB
            'P72.INC'
  PIC16C73  MACLIB
            'P73.INC'
  PIC16C74  MACLIB
            'P74.INC'
  PIC16C84  MACLIB
            'P84.INC'

  If you receive the error [225] Undefined Symbol 'W', the source may
  contain the Parallax opcode MOV W,fr-W. This opcode is not supported by
  PM. This opcode can, however, be replaced with the Microchip equivalent
  SUBWF fr,0.

             Becomes
    MOV W,fr-W     SUBWF fr,0

  The SUBB instruction of PASM was specialized for use with the PIC carry
  flag (C), which is inverted from carry flags in most conventional
  processors (0 if a borrow occurs). Thus, SUBB modified there
  destinations if the specified bit is 0, which is non-sense for general
  bit usage (although it makes sense for 16-bit subtraction). If you used
  these instructions in your program, you must invert the sense of the
  bit.

             Becomes
   SUBB fr,bit    SUBB fr,/bit
   SUBB fr,/bit   SUBB fr,bit

  The original Parallax assembler evaluates equations strictly left to
  right (i.e. 3+4*5 = 35). PM also evaluates equations left to right, but
  uses operator precedence (i.e. 3+4*5 = 23). This typically creates no
  problems since PIC programs tend to be relatively simple. You should,
  however, check for complex calculations to assure that their evaluation
  will be correct.

_ Warnings

100  Attempt to Skip MultiByte OpCode @ Address

Indicates the current instruction is a multibyte Parallax instructions and
that the previous instruction is attempting to skip it. Obviously, if this
were done unintentionally, a successful skip would enter the current opcode
mid-instruction.

101  Use of Local Label Prior to Use of Non-Local Label

Indicates that a local label (i.e. starting with a colon) has been defined
prior to the definition of a non-local label (i.e. a legal label name
starting with other than a colon). Because local names depend on the named
of last non-local label defined, this usage is obviously suspicious. The
label generating the warning is not expanded as are other local labels (see
Local Labels).

102  Code Crosses Boundary @ Address

Both the 12-bit and 14-bit PIC cores have paged architectures in which the
normal incrementing of the PC doesn't extended into page select registers
(PA0 & PA1 in the PIC16C5x, PCLATH in the PIC16Cxx). If a continuous block
of code is generated across a page boundary and a forward jump is coded,
the actual jump location will be to the previous page.

104  Called Addresses must Reside in Lower Half of Page

In the PIC16C5x family, the 9th bit of address is zeroed on calls. Thus,
call destinations must reside in the lower 256 words of any 512 word page.
This mistake is only a warning since calls made to the upper 256 words will
alias to an address in the lower 256 words of the page.

105  Bit Addresses are the Same

This warning indicates that you have attempted to copy a bit to itself. The
Parallax MOVB bit,bit instruction will correctly copy a bit to itself,
although the operation has no useful applications.

106  Register Addresses are the Same

This warning indicates that you have attempted to copy a register to
itself. While this is legal, it generates a MOVF and MOVWF instruction,
placing the moved value in W and setting the Z flag. If your intentions are
to set the Z flag according to contents of the specified register, the TEST
instruction will do this in one word and without destroying the contents of
W.

_ Errors

Unless specified otherwise, each of the following errors will terminate the
assembly of the current line. If possible, the assembler will generate
correct code (or at least the correct number of words) before the line is
aborted. Assembly continues with the next line of source.

Unless otherwise specified, the error report has no side effects other than
to bump the error count.

200  Instruction Restricted to 14-Bit Core

The opcode of the specified line cannot be used for the PIC16C5x family:
          ADDLW  #literal
          SUBLW  #literal
          RETFIE
          RETURN

201  'Character' Expected

The assembler expected, but didn't find, the specified character.

202  Illegal Character 'Character'

The assembler doesn't recognize the legal use of the specified character.

203  '--' or '++' Expected

The Parallax instruction MOVSZ (MOVe and Skip in Zero) must take one of two
forms :MOVSZ  W,++fr
          MOVSZ  W,--fr

204  'W' Expected as First Parameter

The Parallax instruction MOVSZ (MOVe and Skip in Zero) must take one of two
forms :MOVSZ  W,++fr
          MOVSZ  W,--fr

205  Illegal Use of Keyword 'Keyword'

Indicates that the specified identifier is a reserved word of the assembler
and has been improperly used.

206  CHECKSUM Not Supported in 14-Bit Core

The CHECKSUM option may be used as the ID of a processor in the PIC16C5x
family. This option is not legal on the 14-bit core.

208  Illegal Use of SUB Instruction

This error indicates an attempt was made to use the illegal instruction :
         SUB  W,fr

209  Indirect Jump Expected in Form of 'PC+W'

This error indicates an attempt was made to use the illegal instruction :
         JMP  PC+Expr

210  Bit Addresses Must Differ

The Parallax MOVB bit1,/bit2 instruction requires that the source and
destination bits be different. An attempt to copy the complement of a bit
to itself will result in the unconditional setting of the bit.

211  Poorly Formed Numeric Constant 'Token'

Indicates that the symbol is not a legally formed numeric token. If any
initial portion of this token is a valid constant, that portion is
converted and its value is used as the result of the token.

212  Extra Tokens on End of Line

Some initial portion of the current line assembled correctly, but
additional assembly tokens remain unprocessed. This is often the result of
a syntax error (extra parameters, misplaced or missing punctuation, etc.).
Code is generated for the correct initial portion of the line.

213  IRPC Expected Id or String Constant

The second parameter of the IRPC macro definition is the item (scanned
character by character) which drives the macro expansion. This item must be
either an identifier or a quote-enclosed string constant.

214  IRPC Missing Replacement Parameter

The first parameter of the IRPC macro definition is the variable which
accepts the characters scanned from the second parameter. The first
parameter must be an identifier unique within the definition of the macro.

215  Attempt to Redefine Macro 'Identifier'

An attempt was made to redefine the named macro.

216  Attempt to Redefine Macro Parameter 'Identifier'

Each parameter and local variable of a macro must be unique. This error
indicates that a parameter or local name has been duplicated.

217  Attempt to Generate Code in Non-Code Segment

Due to the Harvard Architecture (split code and data spaces) of the PICs,
instructions may only be executed from CODE space (ROM). This error
indicates that an attempt was made to generate opcodes in the data or
EEPROM segments. In general, only the DS pseudo-op is legal in the data
segment and DS, DB and DW are the only legal pseudo-ops in the EEPROM
segment.

218  Address Limit of Address Exceeded

This error indicates that current segment has overflowed.

219  Collision in HEX File @ Address

This error indicates that more than one word has been generated for the
specified ROM address.

220  Illegal Bit Number

In the PIC (and most processors), the bits of a byte are numbered from 0
(the least significant bit - LSB) to 7 (the most significant bit - MSB).
This error indicates that the specified bit number is not in the range of 0
to 7.

221  Illegal Bit Address

The four basic bit operators of the PIC take either an 8-bit field (12-bit
core) or a 10-bit field (14-bit core). This is composed of a register
address and a bit number. If this combination exceeds the 8 or 10 bit range
for the selected processor, this error is generated. Note that only the
composite value is checked - this check in no way guarantees the validity
of the bit number or the register address. These value are, however,
checked whenever they can be checked as separate parameters.

222  Illegal Destination Specifier

Many Microchip instructions expect the second parameter to specify the
destination of the operation result : 0 if the result is also the source
register, 1 if the result is to be placed in W. This error indicates that a
numeric expression was used for this parameter which neither evaluated to 0
nor 1. For clarity, the second parameter can be omitted to use the source
register as the destination and W can be used to specify W as the
destination.

223  Illegal TriState File Register Address Register

The TRIS instruction may only operate upon registers 5, 6, or 7. This error
indicates that the specified register value was other than 5, 6, or 7. The
equivalent Parallax instruction may also generate this error :
        MOV !Register,Source

224  Keyword Directive Only for Use in Macros

Some keywords (such as LOCAL and ENDM) only have meaning in the definition
of a macro body. This error indicates that an attempt was made to use such
a keyword in some other context.

225  Undefined Symbol 'Identifier'

A reference was made to the specified symbol although no such symbol was
detected in the first pass of the assembler.

226  Numeric Constant or Symbol Name Expected

A legal expression is a well formed sentence containing operators and
terminals from which values for the operators are derived. This error
indicates that an expression terminal was encountered which didn't evaluate
to a numeric value.

227  Divide by Zero

An attempt was made (in the source) to divide by zero at assembly time.

228  Modulus by Zero

An attempt was made (in the source) to take the modulus of a number by zero
at assembly time.

229  Device Doesn't Support EEPROM

An attempt was made to generate values in the EEPROM segment for a device
which doesn't support EEPROM.

230  Collision  in EEPROM @ Address

An attempt was made to generate more that one value for the specified
EEPROM location.

231  Attempt to Redefine 'Identifier'

An attempt was made to assign a new value to a symbol defined either as a
program label or using the EQU pseudo-op. A common (but confusing) source
of this error can result from different flows through conditional assembly
blocks between the first and second passes. While this type of variant
programming can be done, it is very tricky and poor programming practice -
it should be avoided.

232  File Name Expected

Indicates that the parameter specified for the current INCLUDE or MACLIB
pseudo-op is not a quoted string.

233  String Expression Expected for Title

The TITLE pseudo-op is used to replace the normal copyright notice of the
listing with a customized header. This new header must be specified as a
quoted string and is the only parameter of the TITLE pseudo-op.

234  Identifier Expected

The IFDEF and IFNDEF conditional assembly pseudo-ops require one identifier
as it parameter. This error is generated whenever this parameter is other
than a legal identifier.

235  Opcode Expected Instead of 'Token'

Any text starting in column 2 or later which is not a commented is assumed
to either be an opcode, a pseudo-op or the name of a defined macro. All
other tokens will generate this error.

236  Label 'Identifier' Undefined in Pass 0

This error indicates that an attempt was made to define the specified
symbol in pass 1, although no definition was made for the symbol during
pass 0. This is almost always the result of different flows through
conditional assembly blocks between pass 0 and pass 1.

237  IRP Missing Replacement Parameter

The IRP macro takes two parameters. The first parameter is an identifier
which is substituted on each expansion with the next item from the comma
separated list (the second parameter). This error indicates that the
identifier expected for the first parameter of the IRP statement was not
found.

_ Fatal Errors

300  Too Many Errors

The assembler can generated an unlimited number of warnings, but the number
of errors is limited. While this value defaults to 15, it can be changed
using the -G option. This fatal error is generated when this allowance is
exceeded.

301  Out of Memory

Indicates that the symbol table, macro table and other memory requirements
for internal bookkeeping have exceeded the memory capacity of your PC.
While this error message is unlikely, it can occur on limited or heavily
burdened systems. If not already at the 640K limit for conventional memory,
add memory. Unloading or loading high of TSRs and network drivers can
increase usable memory. Memory may also be gained by reducing the number of
BUFFERS and FILES allocated in CONFIG.SYS.

302  Unable to Open File 'Filename'

Indicates that DOS was unable to open the specified file. This is either
because the file could not be found or not enough file handles were
available (this usually only occurs with deep nesting of INCLUDE and MACLIB
statements). If the file exists, make sure it resides in the current
directory. If the file is an INCLUDE or MACLIB file, also check in the
default include directory. While this defaults to the INC subdirectory of
the directory where PM.EXE is kept, it can be modified using the -I option.
If the file is found as described above, try increasing the number of FILES
in CONFIG.SYS.

303  Unable to Create File 'Filename'

Indicates that DOS was unable to create the specified file. This is either
because there are not enough file handles available or there is not enough
space on the destination disk. If there is adequate disk space available,
try increasing the number of FILES in CONFIG.SYS.

304  No Source File Specified

This error is generated if PM is invoked with options, but without the name
of a source file. If PM is invoked with no options and no source name, a
brief help screen is displayed.

305  Unable to Write to File 'Filename'

Indicates that DOS was unable to write to the specified file. This usually
results when there is not enough space on the destination disk or the
specified file has some special write protection (such as DOS SHARE.EXE).

306  Page Width must be 80 to 255 Columns

The PAGE pseudo-op is used to specify the size of the listing page. The
first parameter is used to specify the width of the page. This value must
be between 80 and 255, inclusive.

307  Illegal Device Type

An attempt was made to use an illegal specifier with the DEVICE statement.
Such values would have 10 or 11 as the two most significant bits.

308  Macro Buffer Overflow

An attempt was made to define a macro which was larger than 4K. This
usually indicates a missing ENDM pseudo-op.

_ Internal Errors

These errors are not documented, because they should not occur. If they
occur, technical support should be contacted and a copy of the code
producing the error should be made available.

400  Attempt to Free Non-Allocated Memory [Pointer]
401  Attempt to Reference Non-Allocated Memory [Pointer]
402  Attempt to Pop Empty Symbol Table Stack
403  Attempt to Exit on Empty File Stack
404  Attempt to Pop Empty Macro Stack
405  Macro Stack Error
406  Attempt to Pop Empty Conditional Assembly Stack
407  No Function Handler for 'Keyword'

               Index                      Map File, 31
                                          Output
$                                            Binary, 31
$, 10, 29                                    Merged Intel HEX, 32
&                                         Source File, 31
&, 27                                     Symbol Table, 34
<                                       Fuses, 21
< >, 15, 27                             H
=                                       HI, 25
=, 11                                   HS_OSC, 22
|                                       I
|, 27                                   ID, 23
A                                       Identifiers, 28
ABS, 9                                  IF, 13
B                                       IFB, 14
BOD_OFF, 22                             IFDEF, 13
BOD_ON, 22                              IFNB, 14
Brown-Out Detection, 22                 IFNDEF, 13
C                                       INCLUDE, 6, 17
CHECKSUM, 23                            Internal Errors, 49
CLIST, 20                               IRP, 15
CODE, 9                                 IRPC, 15
Code Protection, 22                     L
Command Line Options, 3                 LALL, 20
Compatibility                           LIST, 19
  Parallax, 37                          Listing Controls, 19
Conditional Assembly, 13                LO, 25
Core Type, 22                           Load Pointer, 9, 10
D                                       LOCAL, 16
DATA, 9                                 Local Labels, 28
DB, 10                                  LP_OSC, 22
Debugging Symbols, 29                   M
DEF, 14, 26                             MACLIB, 6, 17
DEVICE, 21, 29                          MACRO, 15
Device Info                             Macros, 15
  PIC16C5x, 32                            Variable Parameters, 14, 15
  PIC16Cxx, 33                          MTLIST, 19
DS, 10                                  N
DW, 10                                  NCLIST, 20
E                                       NLIST, 19
EEPROM, 9                               NMTLIST, 19
EEPROM Size, 22                         Numeric Constants, 27
ELSE, 13                                O
ELSEIF, 13                              Operators, 25
ENDIF, 13                               Option
ENDM, 16                                  Case Sensitive, 4
EQU, 11                                   Debugger Info, 4
Errors, 41                                Disable Extensions, 7
EXITM, 16                                 Extension
Expressions, 25                              Listing, 5
F                                            Map File, 5
Fatal Errors, 47                             Output, 5
Format                                       Source, 5
  Listing, 35                                Symbol, 5
                                          Listing, 6
                                          Max Errors, 6
                                          Output
     Binary, 7
     Merged Intel HEX, 7
  System Header, 6
ORG, 10
Oscillators, 22
P
PAGE, 19
PM Environment Variable, 3
Processor ID, 22
PROTECT_OFF, 22
PROTECT_ON, 22
R
RC_OSC, 22
REF, 26
REPT, 15
RESET, 23
ROM Size, 22
S
SALL, 20
Segment
  Absolute, 9
  Code, 9
  Data, 9
  EEPROM, 9, 10
String Constants, 27
System header directory, 6
T
Temporary Labels, 16, 29
TITLE, 19
W
Warnings, 39
Watch Dog Timer, 22
WDT_OFF, 22
WDT_ON, 22
X
XALL, 20
XT_OSC, 22

