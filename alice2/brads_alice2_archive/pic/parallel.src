;
; Brad and Lawrence's PIC Alice II keyboard test program.
; Accepts a byte on B1, serially clocked in on rising edges of
; B0 (1 start bit, two stop bits), writes that byte on PORTD,
; then interrupts the CPU by setting A0 low.
; On PSP RD interrupt, clears the interrupt by setting A0 high.
;
; January 25, 1997
;
	maclib 'p64.inc'

        device  pic16c64,xt_osc,wdt_off,pwrt_off,protect_off

w_temp  equ     020h
status_temp equ 021h

initstopcnt        equ     2    ; # of stop bits per byte (+ 1)
stopcnt            equ     022h ; storage for stop bits left
initdatabits       equ     10   ; start bits + data bits (+ 1)
databits           equ     023h ; storage for kbd data shifts left
                                ; (1st bit shifted in gets pushed off end)
kbdbyte            equ     024h ; storage for keyboard byte

reset
        org     0               ; on reset
        goto    start

intsvc
        org     4               ; on interrupt
        goto    interrupt

start
        bcf     rp0             ; bank 0
        bsf     porta,0         ; don't interrupt CPU on IRQ 0
        bsf     porta,1         ; don't interrupt CPU on IRQ 1
        bcf     pspif           ; clear PSP interrupt flag
        clrf    portc           ; nothing on our debug port

        movlw   initstopcnt
        movwf   stopcnt         ; set up # of stop bits in kbd data
        movlw   initdatabits
        movwf   databits        ; set up # of actual shifts to make

        bsf     rp0             ; bank 1
        bcf     trisa,0         ; bit 0 port A is output
        bcf     trisa,1         ; bit 1 port A is output

        bsf     trise0          ; /RD is input
        bsf     trise1          ; /WR is input
        bsf     trise2          ; /CS is input

        ; don't need to set trisc, default is 0xff (input)
        ; don't need to set trisb, default is 0xff (input)
        bsf     intedg          ; RB0/INT triggers on low-to-high

        bsf     pspie           ; enable PSP interrupts
        bsf     pspmode         ; enable PSP mode
        bsf     peie            ; enable peripheral interrupts
        bcf     intf            ; clear RB0/INT interrupt flag
        bsf     inte            ; enable RB0/INT interrupt
        bcf     rbif            ; clear RB* interrupt on change flag
        bsf     rbie            ; enable RB* interrupt on change
        bsf     gie             ; enable all interrupts

        bcf     rp0             ; bank 0
                                                            
loop
        goto loop               ; infinite loop
                                  
interrupt
        ; save W and STATUS
        movwf   w_temp          ; save W
        swapf   status, w       ; save status in W
        bcf     rp0             ; bank 0
        movwf   status_temp     ; save status

        btfss   pspif           ; test PSP interrupt flag
        goto    notpsp          ; not PSP
        bsf     rp0             ; bank 1
        btfss   ibf             ; did we get a write?
        goto    gotread         ; nope, jump to read
        ; we got a write
        ; don't do anything here.  Someday write to keyboard.
        ; panic if you see bit 3 go up!
        goto    endpspinterrupt ; return

gotread
        bcf     rp0             ; bank 0
        bsf     porta,0         ; don't assert interrupt on IRQ 0
        bsf     porta,1         ; don't assert interrupt on IRQ 1
        goto    endpspinterrupt

notpsp                          ; must be RB0/INT interrupt
	btfss	intf		; skip next if is definitely INT interrupt
	goto	parallelin	; it's a byte from the parallel port

        decfsz  databits, 1     ; skip next if done with data bits
        goto    gotbit          ; have a good bit on port B
        decfsz  stopcnt, 1      ; skip next if done with keyboard cycle
        goto    morestops       ; not done yet, have stop bits

gotkbdbyte
        movf    kbdbyte, w      ; get kbd byte
        movwf   portd           ; write data to CPU
        bcf     porta, 0        ; turn on interrupt to CPU

        movlw   initstopcnt
        movwf   stopcnt         ; set up # of stop bits in
        movlw   initdatabits
        movwf   databits        ; set up # of actual shifts

        goto    endintinterrupt ; done with sending byte

morestops                       ; only stop bits left
        clrf    databits
        incf    databits        ; set remaining databits to 1
				; next loop through dec's databits, it's 0,
				; skips to decfsz stopcnt
        goto    endintinterrupt ; finish with rb0/int interrupt

gotbit                          ; shift in a bit from keyboard
        bsf     c               ; set carry
        btfss   portb, 1        ; if kbd data bit is set, skip next
        bcf     c               ; clear carry
        rrf     kbdbyte, 1      ; rotate data bit into MSB of kbdbyte
        ; fall through to endintinterrupt

endintinterrupt
        bcf     rp0             ; bank 0
        bcf     intf            ; clear RB0/INT interrupt flag
        goto    finishinterrupt ; pop processor context

parallelin
	btfss	portb, 7	; skip next if STROBE from parallel is set
	goto	endrbinterrupt	; we don't care about high-to-low change.
	movf	portc, w	; get parallel port in
	movwf	portd		; send it to CPU
	bcf	porta, 1	; turn on interrupt to CPU
	; fall through into endrbinterrupt

endrbinterrupt
	bcf	rp0
	bcf	rbif
        goto    finishinterrupt ; pop processor context

endpspinterrupt
        bcf     rp0             ; bank 0
        bcf     pspif           ; clear PSP interrupt flag
	; fall through into endinterrupt

finishinterrupt
        ; restore W and STATUS
        swapf   status_temp, w  ; put old status in W
        movwf   status          ; put into status
        swapf   w_temp, 1       ; swap w_temp in place
        swapf   w_temp, w       ; put old W into W

        retfie
