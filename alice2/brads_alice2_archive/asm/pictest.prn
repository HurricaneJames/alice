                        
                        
                        
                        ; library.asm must be first!
                        ;
                        ; Commonly used assembly routines
                        ;
                        
                        ; 8259 Constants
   0000                 I8259A	EQU	000H		; 8259 port 1
   0001                 I8259B	EQU	001H		; 8259 port 2
                        
                        ;
                        ; LCD Constants
                        ;
   0002                 LCDINST	EQU	002H		; LCD instruction I/O port
   0003                 LCDDATA	EQU	003H		; LCD data I/O port
   0001                 LCLEAR	EQU	001H		; LCD clear instruction
   0038                 LRESET	EQU	038H		; LCD reset to normal instruction
   0080                 LHALF1	EQU	080H		; LCD move cursor to char 1
   00c0                 LHALF2	EQU	0c0H		; LCD move cursor to char 9
   000a                 PAUSE	EQU	0aH		; a UNIX newline
   0000                 STACKTOP	EQU	00000H	; top of stack (wraps to 0ffff)
                        
                        ; PIC Constants
   0004                 PIC	EQU	004H		; PIC I/O port
                        
                        ;
                        ; Set up useful stuff, jump to main program
                        ;
   0000   31 00 00      	LD	SP, STACKTOP
   0003   cd 4c 00      	CALL	LCDINIT
   0006   c3 cb 01      	JP 	MAIN		; get past library routines
                        
                        ;
                        ; Catch reset if it happens and try to print it on the LCD
                        ;
                        
   0038                 	ORG	0038H		; Catch a reset
   0038   21 3f 00      	LD	HL, GOTRESETSTR
   003b   cd 89 00      	CALL	LCDPRINT
   003e   76            	HALT
                        
   003f   47 6f 74 20   GOTRESETSTR	DB	"Got RST 38H", PAUSE, 0
   0043   52 53 54 20   
   0047   33 38 48 0a   
   004b   00            
                        
                        
                        ;
                        ; LCD Init routine
                        ; In: nothing
                        ;
   004c                 LCDINIT
                        
                        
   004c   c5            	PUSH	BC
   004d   e5            	PUSH	HL
                        
   004e   21 6b 00      	LD	HL, LISTRING
   0051   06 0a         	LD	B, LISTRLEN
                        
   0053   c3 58 00      	JP	OUTBLOOP
                        
                        ;
                        ; LCD string bytes output routine
                        ; In:
                        ;     B    - length divided by two, (e.g. # of bytes to output, not
                        ; 	    including the I/O addresses)
                        ;     HL   - address of bytes
                        ;
   0056                 OUTBYTES
   0056   c5            	PUSH	BC
   0057   e5            	PUSH	HL
                        
   0058                 OUTBLOOP
   0058   4e            	LD	C, (HL)
   0059   23            	INC	HL
   005a   ed a3         	OUTI
   005c   20 fa         	JR	NZ, OUTBLOOP
                        
                        	; Probably need a delay here at 1 MHz.
                        	; Are we supposed to check busy bit and wait until not busy?
                        
   005e   e1            	POP	HL
   005f   c1            	POP	BC
                        
   0060   c9            	RET
                        
                        ;
                        ; Clear LCD display
                        ; In: nothing
                        ;
   0061                 LCDCLR
   0061   c5            	PUSH	BC
   0062   e5            	PUSH	HL
                        
   0063   21 7f 00      	LD	HL, LCSTRING
   0066   06 05         	LD	B, LCSTRLEN	; falls through into byte output loop
   0068   c3 58 00      	JP	OUTBLOOP
                        
                        ;
                        ; LCD Initialization string
                        ;
   000a                 LISTRLEN	EQU	10
   006b                 LISTRING
   006b   02 38         	DB	LCDINST, LRESET
   006d   02 38         	DB	LCDINST, LRESET
   006f   02 06         	DB	LCDINST, 006H
   0071   02 0e         	DB	LCDINST, 00eH
   0073   02 01         	DB	LCDINST, LCLEAR
   0075   02 80         	DB	LCDINST, LHALF1
   0077   02 80         	DB	LCDINST, LHALF1
   0079   02 80         	DB	LCDINST, LHALF1
   007b   02 80         	DB	LCDINST, LHALF1
   007d   02 80         	DB	LCDINST, LHALF1
                        
   0005                 LCSTRLEN	EQU	5
   007f                 LCSTRING
   007f   02 01         	DB	LCDINST, LCLEAR
   0081   02 80         	DB	LCDINST, LHALF1
   0083   02 80         	DB	LCDINST, LHALF1
   0085   02 80         	DB	LCDINST, LHALF1
   0087   02 80         	DB	LCDINST, LHALF1
                        
                        ;
                        ; LCD String output routine
                        ; In:
                        ;     HL   - Address of null-terminated string
                        ;
   0089                 LCDPRINT
                        
                        
   0089   f5            	PUSH	AF
   008a   c5            	PUSH	BC
   008b   d5            	PUSH	DE
   008c   e5            	PUSH	HL
                        
   008d   3e 01         	LD	A, LCLEAR
   008f   d3 02         	OUT	(LCDINST), A		; do a clear
                        
                        
   0091   06 fa         	LD	B, 250		; 250 cycles of wait
   0093                 LCDPCLOOP
   0093   10 fe         	DJNZ	LCDPCLOOP
                        
                        
   0095   0e 03         	LD	C, LCDDATA
   0097   16 19         	LD	D, 25		; when 1->0, switch to 2nd display
                        
   0099                 LCDPLOOP
   0099   15            	DEC	D
   009a   c2 a5 00      	JP	NZ, LCDNOSWITCH
                        
   009d   3e c0         	LD	A, LHALF2	; set LCD to address 0xc0
   009f   d3 02         	OUT	(LCDINST), A
                        
                        
   00a1   06 14         	LD	B, 20		; 20 cycles of wait for write to LCD
   00a3                 LCDP2LOOP
   00a3   10 fe         	DJNZ	LCDP2LOOP	; fall through
                        
                        
   00a5                 LCDNOSWITCH
                        
   00a5   7e            	LD	A, (HL)
   00a6   fe 00         	CP	0
   00a8   ca df 00      	JP	Z, LCDPDONE
                        
   00ab   fe 0a         	CP	PAUSE
   00ad   c2 d5 00      	JP	NZ, LCDPDOIT
                        
                        ;	LD	A, 0dh		; return
                        ;	OUT	(PIC), A
                        
                        
                        	; wait for two seconds here!
   00b0   16 02         	LD	D, 2		; 2 * 256 * 256 cycles is close to 1 sec
   00b2                 LCDP1SL1
   00b2   3e 00         	LD	A, 0		; 256 * 256 cycles
   00b4                 LCDP1SL2
   00b4   06 00         	LD	B, 0		; 256 cycles
   00b6                 LCDP1SL3
   00b6   10 fe         	DJNZ	LCDP1SL3
                        
   00b8   3d            	DEC	A
   00b9   c2 b4 00      	JP	NZ, LCDP1SL2
                        
   00bc   15            	DEC	D
   00bd   c2 b2 00      	JP	NZ, LCDP1SL1
                        
                        
   00c0   3e 01         	LD	A, LCLEAR
   00c2   d3 02         	OUT	(LCDINST), A	; do a clear
                        
                        ;	LD	A, 0ah		; linefeed
                        ;	OUT	(PIC), A
                        
                        
   00c4   06 fa         	LD	B, 250		; 250 cycles of wait
   00c6                 LCDPNLOOP
   00c6   10 fe         	DJNZ	LCDPNLOOP
                        
                        
   00c8   3e 80         	LD	A, LHALF1
   00ca   d3 02         	OUT	(LCDINST), A	; go to address 0x80
                        
                        
   00cc   06 14         	LD	B, 20		; 20 cycles of wait for write
   00ce                 LCDP1LOOP
   00ce   10 fe         	DJNZ	LCDP1LOOP
                        
                        
   00d0   16 09         	LD	D, 9		; reset half counter
   00d2   c3 db 00      	JP	LCDPNEXT	; continue with next character
                        
   00d5                 LCDPDOIT
   00d5   d3 03         	OUT	(LCDDATA), A	; output that guy
                        ;	OUT	(PIC), A
                        
                        
   00d7   06 14         	LD	B, 20		; 20 cycles of wait for write
   00d9                 LCDPWLOOP
   00d9   10 fe         	DJNZ	LCDPWLOOP
                        
                        
   00db                 LCDPNEXT
   00db   23            	INC	HL		; next char
   00dc   c3 99 00      	JP	LCDPLOOP
                        
   00df                 LCDPDONE
                        
   00df   e1            	POP	HL
   00e0   d1            	POP	DE
   00e1   c1            	POP	BC
   00e2   f1            	POP	AF
                        
   00e3   c9            	RET
                        
                        
                        ;
                        ; Wait for seconds routine
                        ; In:	
                        ;     A    - number of seconds to wait
                        ;
   00e4                 WAITSECS
   00e4   f5            	PUSH	AF
   00e5   c5            	PUSH	BC
   00e6   07            	RLCA		; multiply A by 2
                        
   00e7                 LCDP1SLP1
   00e7   0e 00         	LD	C, 0		; 256 * 256 cycles
   00e9                 LCDP1SLP2
   00e9   06 00         	LD	B, 0		; 256 cycles
   00eb                 LCDP1SLP3
   00eb   10 fe         	DJNZ	LCDP1SLP3
                        
   00ed   0d            	DEC	C
   00ee   c2 e9 00      	JP	NZ, LCDP1SLP2
                        
   00f1   3d            	DEC	A
   00f2   c2 e7 00      	JP	NZ, LCDP1SLP1
                        
   00f5   c1            	POP	BC
   00f6   f1            	POP	AF
                        
   00f7   c9            	RET
                        
                        
                        ;
                        ; put the hex string representation of A into the location at IX
                        ; IX becomes IX + 2
                        ;
   00f8                 PHEXBYTE
   00f8   f5            	PUSH	AF
   00f9   c5            	PUSH	BC
                        
   00fa   47            	LD	B, A
   00fb   e6 f0         	AND	0f0H
   00fd   cb 3f         	SRL	A
   00ff   cb 3f         	SRL	A
   0101   cb 3f         	SRL	A
   0103   cb 3f         	SRL	A
   0105   fe 0a         	CP	0aH
   0107   da 0f 01      	JP	C, DIG1LESS
   010a   c6 57         	ADD	A, "a" - 10
   010c   c3 11 01      	JP	DIG1DONE
   010f                 DIG1LESS
   010f   c6 30         	ADD	A, "0"
   0111                 DIG1DONE
                        
   0111   dd 77 00      	LD	(IX), A
   0114   dd 23         	INC	IX
   0116   78            	LD	A, B
   0117   e6 0f         	AND	0fH
   0119   fe 0a         	CP	0aH
   011b   da 23 01      	JP	C, DIG2LESS
   011e   c6 57         	ADD	A, "a" - 10
   0120   c3 25 01      	JP	DIG2DONE
   0123                 DIG2LESS
   0123   c6 30         	ADD	A, "0"
   0125                 DIG2DONE
   0125   dd 77 00      	LD	(IX), A
   0128   dd 23         	INC	IX
                        
   012a   c1            	POP	BC
   012b   f1            	POP	AF
   012c   c9            	RET
                        
                        ;
                        ; put the hex string representation of HL into the location at IX
                        ; IX becomes IX + 4
                        ;
   012d                 PHEXWORD
                        
   012d   f5            	PUSH	AF
   012e   7c            	LD	A, H
   012f   cd f8 00      	CALL	PHEXBYTE
   0132   7d            	LD	A, L
   0133   cd f8 00      	CALL	PHEXBYTE
   0136   f1            	POP	AF
   0137   c9            	RET
                        
                        
                        
                        ;
                        ; GETS - Inputs a string into the
                        ;   buffer pointed to by HL.  String is
                        ;   NULL-terminated.
                        ;
                        ; No registers are modified.
                        ;
                        
   0138                 GETS
   0138   f5            	PUSH	AF
   0139   e5            	PUSH	HL
   013a   c5            	PUSH	BC
   013b   d5            	PUSH	DE
   013c   dd e5         	PUSH	IX
   013e   fd e5         	PUSH	IY
                        
   0140   e5            	PUSH	HL
   0141   dd e1         	POP	IX	 ; IX = end of buffer
   0143   dd 36 00 00   	LD	(IX), 0
                        
   0147                 GETS_LOOP ; wait for key
   0147   3a 01 80      	LD	A, (NUMKEY)
   014a   fe 00         	CP	0
   014c   c2 5b 01      	JP	NZ, GOT_KEY
                        
   014f   3a 0d 80      	LD	A, (SHOULD_RUN)
   0152   fe 00         	CP	0
   0154   ca 47 01      	JP	Z, GETS_LOOP
                        
                        	; comment this in for the next burn-in
                        	; LD	A, 0
                        	; LD	(SHOULD_RUN), A
                        
   0157   2a 09 80      	LD	HL, (CURRENT_ADDR)
   015a   e9            	JP	(HL)
                        
   015b                 GOT_KEY
   015b   f3            	DI
   015c   3a 01 80      	LD	A, (NUMKEY)	; in case it changed before DI
   015f   fd 21 00 a0   	LD	IY, KEYBUF
   0163   47            	LD	B, A
                        
   0164                 GETS_COPY
   0164   fd 7e 00      	LD	A, (IY)
                        
   0167   fe 08         	CP	8  ; backspace
   0169   ca 71 01      	JP	Z, BACKSPACE
   016c   fe 7f         	CP	127  ; delete
   016e   c2 82 01      	JP	NZ, NOT_BACKSPACE
                        
   0171                 BACKSPACE
                        	; do not backspace past beginning of buffer
   0171   dd e5         	PUSH	IX	; move IX into DE
   0173   d1            	POP	DE
   0174   37            	SCF		; carry = 1
   0175   3f            	CCF		; carry = 0
   0176   e5            	PUSH	HL	; save HL
   0177   ed 52         	SBC	HL, DE	; HL -= DE
   0179   e1            	POP	HL	; restore HL
   017a   ca 87 01      	JP	Z, NEXT_KEY ; do not backspace if IX == HL
                        
   017d   dd 2b         	DEC	IX
   017f   c3 87 01      	JP	NEXT_KEY
                        
   0182                 NOT_BACKSPACE
   0182   dd 77 00      	LD	(IX), A
   0185   dd 23         	INC	IX
                        
   0187                 NEXT_KEY
   0187   fe 0a         	CP	10 ; return (keyboard)
   0189   ca a5 01      	JP	Z, GETS_DONE
                        
   018c   fe 0d         	CP	13 ; return (maybe serial)
   018e   ca a5 01      	JP	Z, GETS_DONE
                        
   0191   fd 23         	INC	IY
                        
   0193   10 cf         	DJNZ	GETS_COPY
                        
   0195   3e 00         	LD	A, 0
   0197   32 01 80      	LD	(NUMKEY), A
   019a   fb            	EI
                        
   019b   dd 36 00 00   	LD	(IX), 0
   019f   cd 89 00      	CALL	LCDPRINT
                        
   01a2   c3 47 01      	JP	GETS_LOOP
                        
   01a5                 GETS_DONE
   01a5   3e 00         	LD	A, 0
   01a7   32 01 80      	LD	(NUMKEY), A
   01aa   fb            	EI
                        
   01ab   dd 36 00 00   	LD	(IX), 0
                        
   01af   fd e1         	POP	IY
   01b1   dd e1         	POP	IX
   01b3   d1            	POP	DE
   01b4   c1            	POP	BC
   01b5   e1            	POP	HL
   01b6   f1            	POP	AF
   01b7   c9            	RET
                        
                        ;----------------------------------------
                        
                        
                        ;
                        ; STRCPY - Copies HL into IX.
                        ;
                        ; Leaves IX at terminating 0.  No other
                        ; registers are modified.
                        ;
                        ; 
                        ;
                        
   01b8                 STRCPY
   01b8   e5            	PUSH	HL
   01b9   f5            	PUSH	AF
                        
   01ba                 STRCPY_LOOP
   01ba   7e            	LD	A, (HL)
   01bb   dd 77 00      	LD	(IX), A
   01be   23            	INC	HL
   01bf   dd 23         	INC	IX
                        
   01c1   fe 00         	CP	0
   01c3   c2 ba 01      	JP	NZ, STRCPY_LOOP
                        
   01c6   dd 2b         	DEC	IX
                        
   01c8   f1            	POP	AF
   01c9   e1            	POP	HL
   01ca   c9            	RET
                        
                        ;----------------------------------------
                        
                        
   8000                 PIC_COMMAND	EQU	08000H
   8001                 NUMKEY		EQU	08001H
   8003                 PICBYTE		EQU	08003H
   8004                 SHIFT_STATUS	EQU	08004H
   8005                 CTRL_STATUS	EQU	08005H
   8006                 ALT_STATUS	EQU	08006H
   8007                 UPKEY_FLAG	EQU	08007H
   8008                 CURRENT_CMD	EQU	08008H
   8009                 CURRENT_ADDR	EQU	08009H ; two bytes
   800b                 CURRENT_LEN	EQU	0800BH
   800c                 CURRENT_PTR	EQU	0800CH ; point into CURRENT_CMD
   800d                 SHOULD_RUN	EQU	0800DH
   a000                 KEYBUF		EQU	0A000H
   c000                 INPUT_BUF	EQU	0C000H
   c040                 OUTPUT_BUF	EQU	0C040H
                        
   0012                 LSHIFT_KEY	EQU	012H
   0059                 RSHIFT_KEY	EQU	059H
   0014                 CTRL_KEY	EQU	014H
   0011                 ALT_KEY		EQU	011H
   00f0                 UP_KEY		EQU	0F0H
   00e0                 EXT_KEY		EQU	0E0H
   00e1                 EXT2_KEY	EQU	0E1H
                        
   0000                 PIC_NON_CMD	EQU	000H
   0001                 PIC_SER_CMD	EQU	001H
   0002                 PIC_KBD_CMD	EQU	002H
   0003                 PIC_TIM_CMD	EQU	003H
                        
   0001                 CMD_SEND	EQU	001H
   0002                 CMD_RUN		EQU	002H
                        
                        
                        ;----------------------------------------
                        
                        ;
                        ; Memory test program
                        ;
                        
   01cb                 MAIN
   01cb   21 58 03      	LD	HL, INTROSTR
   01ce   cd 89 00      	CALL 	LCDPRINT
                        
                        ;
                        ; Setup the 8259
                        ;
                        
   01d1   3e 16         	LD	A, 016H    ; F = 1, S = 1
   01d3   d3 00         	OUT	(I8259A), A
                        
   01d5   3e 3f         	LD	A, 03FH	   ; Table is at 03F00H
   01d7   d3 01         	OUT	(I8259B), A
                        
   01d9   3e f0         	LD	A, 0F0H    ; Enable lower 4 IRQs
   01db   d3 01         	OUT	(I8259B), A
                        
                        ;
                        ; Initialize our variables
                        ;
                        
   01dd   3e 00         	LD	A, 0
   01df   32 00 80      	LD	(PIC_COMMAND), A
   01e2   32 01 80      	LD	(NUMKEY), A
   01e5   32 04 80      	LD	(SHIFT_STATUS), A
   01e8   32 05 80      	LD	(CTRL_STATUS), A
   01eb   32 06 80      	LD	(ALT_STATUS), A
   01ee   32 07 80      	LD	(UPKEY_FLAG), A
   01f1   32 0c 80      	LD	(CURRENT_PTR), A
   01f4   32 0d 80      	LD	(SHOULD_RUN), A
                        
                        ;
                        ; Read a byte from the pic in case it triggered
                        ; an interrupt before we were ready (keyboard
                        ; reset).  This resets the PIC interrupt line.
                        ;
                        ; The command read routine throws away commands it does not understand,
                        ; so it is likely we will get the keyboard init status byte here but the
                        ; command read routine will chuck it and we will catch up on the next byte.
                        ;
                        
   01f7   db 04         	IN	A, (PIC)
                        
                        ;
                        ; Setup interrupt mode 0
                        ;
                        
   01f9   ed 46         	IM	0
   01fb   fb            	EI
                        
                        ;
                        ; Go, go, go!
                        ;
                        
   01fc                 PRINTAGAIN
   01fc   21 67 03      	LD	HL, PLEASESTR
   01ff   cd 89 00      	CALL	LCDPRINT
                        
   0202   21 00 c0      	LD	HL, INPUT_BUF
   0205   cd 38 01      	CALL	GETS
                        
   0208   21 73 03      	LD	HL, HELLOSTR
   020b   dd 21 40 c0   	LD	IX, OUTPUT_BUF
   020f   cd b8 01      	CALL	STRCPY
                        
   0212   21 00 c0      	LD	HL, INPUT_BUF
   0215   cd b8 01      	CALL	STRCPY
                        
   0218   dd 36 00 0a   	LD	(IX), PAUSE
   021c   dd 23         	INC	IX
   021e   dd 36 00 00   	LD	(IX), 0
                        
   0222   21 40 c0      	LD	HL, OUTPUT_BUF
   0225   cd 89 00      	CALL	LCDPRINT
                        
   0228   c3 fc 01      	JP	PRINTAGAIN
                        
                        ;----------------------------------------
                        
   022b                 ISR0	; PIC interrupt
                        
                        	;
                        	; The PIC sends a command byte followed by an
                        	; optional data byte.
                        	;
                        	;   Command byte: PIC_SER_CMD
                        	;   Data byte: serial byte in ASCII
                        	;
                        	;   Command byte: PIC_KBD_CMD
                        	;   Data byte: keyboard byte as scan code
                        	;
                        	;   Command byte: PIC_TIM_CMD
                        	;   Data byte: none
                        	;
                        	; Current command is stored in PIC_COMMAND, which is
                        	; equal to PIC_NON_CMD if we are waiting for a command.
                        	;
                        
   022b   f5            	PUSH	AF
                        
   022c   db 04         	IN	A, (PIC)
   022e   32 03 80      	LD	(PICBYTE), A
                        
                        ; START TEST
                        
                        ; END TEST
                        
   0231   3a 00 80      	LD	A, (PIC_COMMAND)
   0234   fe 00         	CP	PIC_NON_CMD	; Cmd not read yet
   0236   ca 46 02      	JP	Z, ISR0_IS_COMMAND
                        
   0239   fe 01         	CP	PIC_SER_CMD
   023b   ca 57 02      	JP	Z, ISR0_IS_SERIAL
                        
   023e   fe 02         	CP	PIC_KBD_CMD
   0240   ca 62 02      	JP	Z, ISR0_IS_KEYBOARD
                        
   0243   c3 6d 02      	JP	ISR0_END	; Whoa, bad byte
                        
   0246                 ISR0_IS_COMMAND
   0246   3a 03 80      	LD	A, (PICBYTE)
   0249   fe 03         	CP	PIC_TIM_CMD	; special case for timer cause no data
   024b   ca 54 02      	JP	Z, ISR0_IS_TIMER
                        
   024e   32 00 80      	LD	(PIC_COMMAND), A
   0251   c3 6d 02      	JP	ISR0_END
                        
   0254                 ISR0_IS_TIMER
                        	; do something, leave PIC_COMMAND zero
   0254   c3 6d 02      	JP	ISR0_END
                        
   0257                 ISR0_IS_SERIAL
   0257   cd 74 02      	CALL	HANDLE_SERIAL
   025a   3e 00         	LD	A, PIC_NON_CMD
   025c   32 00 80      	LD	(PIC_COMMAND), A
   025f   c3 6d 02      	JP	ISR0_END
                        
   0262                 ISR0_IS_KEYBOARD
   0262   cd 8b 02      	CALL	HANDLE_KEYBOARD
   0265   3e 00         	LD	A, PIC_NON_CMD
   0267   32 00 80      	LD	(PIC_COMMAND), A
   026a   c3 6d 02      	JP	ISR0_END
                        
   026d                 ISR0_END
   026d   3e 20         	LD	A, 020H		; End of Interrupt
   026f   d3 00         	OUT	(I8259A), A
                        
   0271   f1            	POP	AF
   0272   fb            	EI
   0273   c9            	RET
                        
                        ;------------------
                        
   0274                 HANDLE_SERIAL
   0274   e5            	PUSH	HL
   0275   c5            	PUSH	BC
                        
   0276   21 00 a0      	LD	HL, KEYBUF
   0279   3a 01 80      	LD	A, (NUMKEY)
   027c   4f            	LD	C, A
   027d   06 00         	LD	B, 0
   027f   09            	ADD	HL, BC		; HL = pointer into buffer
   0280   3c            	INC	A
   0281   32 01 80      	LD	(NUMKEY), A
                        
   0284   3a 03 80      	LD	A, (PICBYTE)	; Key in A
   0287   77            	LD	(HL), A		; Stick our letter in buffer
                        
   0288   c1            	POP	BC
   0289   e1            	POP	HL
   028a   c9            	RET
                        
                        ;------------------
                        
   028b                 HANDLE_KEYBOARD
   028b   e5            	PUSH	HL
   028c   c5            	PUSH	BC
                        
   028d   3a 03 80      	LD	A, (PICBYTE)	; Get the byte
                        
   0290   fe f0         	CP	UP_KEY		; Key-up is preceded by UP_KEY
   0292   c2 9d 02      	JP	NZ, NOT_UP_KEY
                        
   0295   3e 01         	LD	A, 1
   0297   32 07 80      	LD	(UPKEY_FLAG), A
   029a   c3 1d 03      	JP	END_HANDLE_KEYBOARD
                        
   029d                 NOT_UP_KEY
   029d   fe e0         	CP	EXT_KEY		; Extended keys preceded by EXT_KEY
   029f   ca 18 03      	JP	Z, DID_KEY	; For now just ignore
                        
   02a2   fe e1         	CP	EXT2_KEY	; Break preceded by EXT2_KEY
   02a4   ca 18 03      	JP	Z, DID_KEY	; For now just ignore
                        
   02a7   cb 7f         	BIT	7, A		; See if high bit is on
   02a9   c2 18 03      	JP	NZ, DID_KEY	; Ignore if >= 128
                        
   02ac   fe 12         	CP	LSHIFT_KEY	; See if it is a shift key
   02ae   ca b6 02      	JP	Z, IS_SHIFT
   02b1   fe 59         	CP	RSHIFT_KEY
   02b3   c2 c1 02      	JP	NZ, NOT_SHIFT
   02b6                 IS_SHIFT
   02b6   3a 07 80      	LD	A, (UPKEY_FLAG)
   02b9   ee 01         	XOR	1
   02bb   32 04 80      	LD	(SHIFT_STATUS), A
   02be   c3 18 03      	JP	DID_KEY
                        
   02c1                 NOT_SHIFT
   02c1   fe 14         	CP	CTRL_KEY	; See if it is a control key
   02c3   c2 d1 02      	JP	NZ, NOT_CTRL
                        
   02c6   3a 07 80      	LD	A, (UPKEY_FLAG)
   02c9   ee 01         	XOR	1
   02cb   32 05 80      	LD	(CTRL_STATUS), A
   02ce   c3 18 03      	JP	DID_KEY
                        
   02d1                 NOT_CTRL
   02d1   fe 11         	CP	ALT_KEY		; See if it is an alt key
   02d3   c2 e1 02      	JP	NZ, NOT_ALT
                        
   02d6   3a 07 80      	LD	A, (UPKEY_FLAG)
   02d9   ee 01         	XOR	1
   02db   32 06 80      	LD	(ALT_STATUS), A
   02de   c3 18 03      	JP	DID_KEY
                        
   02e1                 NOT_ALT
   02e1   6f            	LD	L, A		; HL = A
   02e2   26 00         	LD	H, 0
                        
   02e4   3a 07 80      	LD	A, (UPKEY_FLAG) ; Ignore all other key ups
   02e7   fe 01         	CP	1
   02e9   ca 18 03      	JP	Z, DID_KEY
                        
   02ec   29            	ADD	HL, HL		; HL *= 4
   02ed   29            	ADD	HL, HL
                        
   02ee   06 00         	LD	B, 0
   02f0   3a 04 80      	LD	A, (SHIFT_STATUS)
   02f3   4f            	LD	C, A
   02f4   09            	ADD	HL, BC
                        
   02f5   3a 05 80      	LD	A, (CTRL_STATUS)
   02f8   4f            	LD	C, A
   02f9   09            	ADD	HL, BC
   02fa   09            	ADD	HL, BC
                        
   02fb   3a 06 80      	LD	A, (ALT_STATUS)
   02fe   4f            	LD	C, A
   02ff   09            	ADD	HL, BC
   0300   09            	ADD	HL, BC
   0301   09            	ADD	HL, BC
                        
   0302   01 7a 03      	LD	BC, KEY_XLAT	; Translation table
   0305   09            	ADD	HL, BC
                        
   0306   7e            	LD	A, (HL)		; Get actual key
   0307   f5            	PUSH	AF
                        
   0308   21 00 a0      	LD	HL, KEYBUF
   030b   3a 01 80      	LD	A, (NUMKEY)
   030e   4f            	LD	C, A
   030f   06 00         	LD	B, 0
   0311   09            	ADD	HL, BC		; HL = pointer into buffer
   0312   3c            	INC	A
   0313   32 01 80      	LD	(NUMKEY), A
                        
   0316   f1            	POP	AF		; Key in A
   0317   77            	LD	(HL), A		; Stick our ASCII letter in there
                        
                        
   0318                 DID_KEY
                        	; Reset "up" flag
   0318   3e 00         	LD	A, 0
   031a   32 07 80      	LD	(UPKEY_FLAG), A
                        
   031d                 END_HANDLE_KEYBOARD
                        
   031d   c1            	POP	BC
   031e   e1            	POP	HL
   031f   c9            	RET
                        
                        ;------------------
                        
   0320                 ISR1
   0320   f5            	PUSH	AF
                        
   0321   3e 20         	LD	A, 020H		; End of Interrupt
   0323   d3 00         	OUT	(I8259A), A
                        
   0325   f1            	POP	AF
   0326   fb            	EI
   0327   c9            	RET
                        
                        ;------------------
                        
   0328                 ISR2
   0328   f5            	PUSH	AF
                        
   0329   3e 20         	LD	A, 020H		; End of Interrupt
   032b   d3 00         	OUT	(I8259A), A
                        
   032d   f1            	POP	AF
   032e   fb            	EI
   032f   c9            	RET
                        
                        ;------------------
                        
   0330                 ISR3
   0330   f5            	PUSH	AF
                        
   0331   3e 20         	LD	A, 020H		; End of Interrupt
   0333   d3 00         	OUT	(I8259A), A
                        
   0335   f1            	POP	AF
   0336   fb            	EI
   0337   c9            	RET
                        
                        ;------------------
                        
   0338                 ISR4
   0338   f5            	PUSH	AF
                        
   0339   3e 20         	LD	A, 020H		; End of Interrupt
   033b   d3 00         	OUT	(I8259A), A
                        
   033d   f1            	POP	AF
   033e   fb            	EI
   033f   c9            	RET
                        
                        ;------------------
                        
   0340                 ISR5
   0340   f5            	PUSH	AF
                        
   0341   3e 20         	LD	A, 020H		; End of Interrupt
   0343   d3 00         	OUT	(I8259A), A
                        
   0345   f1            	POP	AF
   0346   fb            	EI
   0347   c9            	RET
                        
                        ;------------------
                        
   0348                 ISR6
   0348   f5            	PUSH	AF
                        
   0349   3e 20         	LD	A, 020H		; End of Interrupt
   034b   d3 00         	OUT	(I8259A), A
                        
   034d   f1            	POP	AF
   034e   fb            	EI
   034f   c9            	RET
                        
                        ;------------------
                        
   0350                 ISR7
   0350   f5            	PUSH	AF
                        
   0351   3e 20         	LD	A, 020H		; End of Interrupt
   0353   d3 00         	OUT	(I8259A), A
                        
   0355   f1            	POP	AF
   0356   fb            	EI
   0357   c9            	RET
                        
                        ;----------------------------------------
                        
   0358   50 49 43 31   INTROSTR	DB	"PIC16C64 test", 10, 0
   035c   36 43 36 34   
   0360   20 74 65 73   
   0364   74 0a 00      
                        
   0367   59 6f 75 72   PLEASESTR	DB	"Your name?", 10, 0
   036b   20 6e 61 6d   
   036f   65 3f 0a 00   
   0373   48 65 6c 6c   HELLOSTR	DB	"Hello ", 0
   0377   6f 20 00      
                        
   037a                 KEY_XLAT 	; Normal, shift, ctrl, alt
   037a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   037e   39 39 39 39   	DB	 '9', '9', '9', '9'  ; F9
   0382   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0386   35 35 35 35   	DB	 '5', '5', '5', '5'  ; F5
   038a   33 33 33 33   	DB	 '3', '3', '3', '3'  ; F3
   038e   31 31 31 31   	DB	 '1', '1', '1', '1'  ; F1
   0392   32 32 32 32   	DB	 '2', '2', '2', '2'  ; F2
   0396   31 31 31 31   	DB	 '1', '1', '1', '1'  ; F12
   039a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   039e   31 31 31 31   	DB	 '1', '1', '1', '1'  ; F10
   03a2   38 38 38 38   	DB	 '8', '8', '8', '8'  ; F8
   03a6   36 36 36 36   	DB	 '6', '6', '6', '6'  ; F6
   03aa   34 34 34 34   	DB	 '4', '4', '4', '4'  ; F4
   03ae   09 09 09 09   	DB	   9,   9,   9,   9  ; Tab
   03b2   60 7e 60 60   	DB	 '`', '~', '`', '`'
   03b6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03ba   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03be   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Alt
   03c2   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Left shift
   03c6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03ca   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Control
   03ce   71 51 11 11   	DB	 'q', 'Q',  17,  17
   03d2   31 21 31 31   	DB	 '1', '!', '1', '1'
   03d6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03da   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03de   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03e2   7a 5a 1a 1a   	DB	 'z', 'Z',  26,  26
   03e6   73 53 13 13   	DB	 's', 'S',  19,  19
   03ea   61 41 01 01   	DB	 'a', 'A',   1,   1
   03ee   77 57 17 17   	DB	 'w', 'W',  23,  23
   03f2   32 40 32 32   	DB	 '2', '@', '2', '2'
   03f6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03fa   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   03fe   63 43 03 03   	DB	 'c', 'C',   3,   3
   0402   78 58 18 18   	DB	 'x', 'X',  24,  24
   0406   64 44 04 04   	DB	 'd', 'D',   4,   4
   040a   65 45 05 05   	DB	 'e', 'E',   5,   5
   040e   34 24 34 34   	DB	 '4', '$', '4', '4'
   0412   33 23 33 33   	DB	 '3', '#', '3', '3'
   0416   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   041a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   041e   20 20 20 20   	DB	 ' ', ' ', ' ', ' ' 
   0422   76 56 16 16   	DB	 'v', 'V',  22,  22
   0426   66 46 06 06   	DB	 'f', 'F',   6,   6
   042a   74 54 14 14   	DB	 't', 'T',  20,  20
   042e   72 52 12 12   	DB	 'r', 'R',  18,  18
   0432   35 25 35 35   	DB	 '5', '%', '5', '5'
   0436   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   043a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   043e   6e 4e 0e 0e   	DB	 'n', 'N',  14,  14
   0442   62 42 02 02   	DB	 'b', 'B',   2,   2
   0446   68 48 08 08   	DB	 'h', 'H',   8,   8
   044a   67 47 07 07   	DB	 'g', 'G',   7,   7
   044e   79 59 19 19   	DB	 'y', 'Y',  25,  25
   0452   36 5e 36 36   	DB	 '6', '^', '6', '6'
   0456   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   045a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   045e   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0462   6d 4d 0d 0d   	DB	 'm', 'M',  13,  13
   0466   6a 4a 0a 0a   	DB	 'j', 'J',  10,  10
   046a   75 55 15 15   	DB	 'u', 'U',  21,  21
   046e   37 26 37 37   	DB	 '7', '&', '7', '7'
   0472   38 2a 38 38   	DB	 '8', '*', '8', '8'
   0476   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   047a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   047e   2c 3c 2c 2c   	DB	 ',', '<', ',', ','
   0482   6b 4b 0b 0b   	DB	 'k', 'K',  11,  11
   0486   69 49 09 09   	DB	 'i', 'I',   9,   9
   048a   6f 4f 0f 0f   	DB	 'o', 'O',  15,  15
   048e   30 29 30 30   	DB	 '0', ')', '0', '0'
   0492   39 28 39 39   	DB	 '9', '(', '9', '9'
   0496   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   049a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   049e   2e 3e 2e 2e   	DB	 '.', '>', '.', '.'
   04a2   2f 3f 2f 2f   	DB	 '/', '?', '/', '/'
   04a6   6c 4c 0c 0c   	DB	 'l', 'L',  12,  12
   04aa   3b 3a 3b 3b   	DB	 ';', ':', ';', ';'
   04ae   70 50 10 10   	DB	 'p', 'P',  16,  16
   04b2   2d 5f 2d 2d   	DB	 '-', '_', '-', '-'
   04b6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04ba   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04be   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04c2   27 22 27 27   	DB	  39, '"',  39,  39  ; Single quote
   04c6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04ca   5b 7b 5b 5b   	DB	 '[', '{', '[', '['
   04ce   3d 2b 3d 3d   	DB	 '=', '+', '=', '='
   04d2   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04d6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04da   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Caps lock
   04de   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Right shift
   04e2   0a 0a 0a 0a   	DB	  10,  10,  10,  10  ; Enter
   04e6   5d 7d 5d 5d   	DB	 ']', '}', ']', ']'
   04ea   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04ee   5c 7c 5c 5c   	DB	  92, '|',  92,  92  ; Backslash
   04f2   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04f6   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04fa   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   04fe   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0502   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0506   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   050a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   050e   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0512   08 08 08 08   	DB	   8,   8,   8,   8  ; Backspace
   0516   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   051a   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   051e   31 31 31 31   	DB	 '1', '1', '1', '1'  ; Numeric 1
   0522   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0526   34 34 34 34   	DB	 '4', '4', '4', '4'  ; Numeric 4
   052a   37 37 37 37   	DB	 '7', '7', '7', '7'  ; Numeric 7
   052e   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0532   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   0536   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
   053a   30 30 30 30   	DB	 '0', '0', '0', '0'  ; Numeric 0
   053e   2e 2e 2e 2e   	DB	 '.', '.', '.', '.'  ; Numeric .
   0542   32 32 32 32   	DB	 '2', '2', '2', '2'  ; Numeric 2
   0546   35 35 35 35   	DB	 '5', '5', '5', '5'  ; Numeric 5
   054a   36 36 36 36   	DB	 '6', '6', '6', '6'  ; Numeric 6
   054e   38 38 38 38   	DB	 '8', '8', '8', '8'  ; Numeric 8
   0552   1b 1b 1b 1b   	DB	  27,  27,  27,  27  ; Escape
   0556   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Num lock
   055a   31 31 31 31   	DB	 '1', '1', '1', '1'  ; F11
   055e   2b 2b 2b 2b   	DB	 '+', '+', '+', '+'  ; Numeric +
   0562   33 33 33 33   	DB	 '3', '3', '3', '3'  ; Numeric 3
   0566   2d 2d 2d 2d   	DB	 '-', '-', '-', '-'  ; Numeric -
   056a   2a 2a 2a 2a   	DB	 '*', '*', '*', '*'  ; Numeric *
   056e   39 39 39 39   	DB	 '9', '9', '9', '9'  ; Numeric 9
   0572   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'  ; Scroll lock
   0576   3f 3f 3f 3f   	DB	 '?', '?', '?', '?'
                        
   3f00                 	ORG	03F00H
   3f00                 INTTABLE
                        
                        	; IRQ0
   3f00   c3 2b 02      	JP	ISR0
   3f03   00            	DB	0
                        
                        	; IRQ1
   3f04   c3 20 03      	JP	ISR1
   3f07   00            	DB	0
                        
                        	; IRQ2
   3f08   c3 28 03      	JP	ISR2
   3f0b   00            	DB	0
                        
                        	; IRQ3
   3f0c   c3 30 03      	JP	ISR3
   3f0f   00            	DB	0
                        
                        	; IRQ4
   3f10   c3 38 03      	JP	ISR4
   3f13   00            	DB	0
                        
                        	; IRQ5
   3f14   c3 40 03      	JP	ISR5
   3f17   00            	DB	0
                        
                        	; IRQ6
   3f18   c3 48 03      	JP	ISR6
   3f1b   00            	DB	0
                        
                        	; IRQ7
   3f1c   c3 50 03      	JP	ISR7
   3f1f   00            	DB	0
                        
   4000                 	ORG	04000H
                        
   4000                 SHITAGAIN
   4000   21 0f 40      	LD	HL, SHITSTR
   4003   cd 89 00      	CALL	LCDPRINT
                        
   4006   21 20 40      	LD	HL, SHOOTSTR
   4009   cd 89 00      	CALL	LCDPRINT
                        
   400c   c3 00 40      	JP	SHITAGAIN
                        
   400f   54 68 69 73   SHITSTR		DB	"This shit works", 10, 0
   4013   20 73 68 69   
   4017   74 20 77 6f   
   401b   72 6b 73 0a   
   401f   00            
   4020   53 68 6f 6f   SHOOTSTR	DB	"Shoot my dog", 10, 0
   4024   74 20 6d 79   
   4028   20 64 6f 67   
   402c   0a 00         
                        
   402e                 	END
0011  ALT_KEY       8006  ALT_STATUS    0171  BACKSPACE     0002  CMD_RUN   
0001  CMD_SEND      0014  CTRL_KEY      8005  CTRL_STATUS    8009  CURRENT_ADDR
8008  CURRENT_CMD    800b  CURRENT_LEN    800c  CURRENT_PTR    0318  DID_KEY   
0111  DIG1DONE      010f  DIG1LESS      0125  DIG2DONE      0123  DIG2LESS  
031d  END_HANDLE_KEYBOARD    00e1  EXT2_KEY      00e0  EXT_KEY       0138  GETS      
0164  GETS_COPY     01a5  GETS_DONE     0147  GETS_LOOP     003f  GOTRESETSTR
015b  GOT_KEY       028b  HANDLE_KEYBOARD    0274  HANDLE_SERIAL    0373  HELLOSTR  
0000  I8259A        0001  I8259B        c000  INPUT_BUF     0358  INTROSTR  
3f00  INTTABLE      022b  ISR0          026d  ISR0_END      0246  ISR0_IS_COMMAND
0262  ISR0_IS_KEYBOARD    0257  ISR0_IS_SERIAL    0254  ISR0_IS_TIMER    0320  ISR1      
0328  ISR2          0330  ISR3          0338  ISR4          0340  ISR5      
0348  ISR6          0350  ISR7          02b6  IS_SHIFT      a000  KEYBUF    
037a  KEY_XLAT      0061  LCDCLR        0003  LCDDATA       004c  LCDINIT   
0002  LCDINST       00a5  LCDNOSWITCH    00ce  LCDP1LOOP     00b2  LCDP1SL1  
00b4  LCDP1SL2      00b6  LCDP1SL3      00e7  LCDP1SLP1     00e9  LCDP1SLP2 
00eb  LCDP1SLP3     00a3  LCDP2LOOP     0093  LCDPCLOOP     00d5  LCDPDOIT  
00df  LCDPDONE      0099  LCDPLOOP      00db  LCDPNEXT      00c6  LCDPNLOOP 
0089  LCDPRINT      00d9  LCDPWLOOP     0001  LCLEAR        007f  LCSTRING  
0005  LCSTRLEN      0080  LHALF1        00c0  LHALF2        006b  LISTRING  
000a  LISTRLEN      0038  LRESET        0012  LSHIFT_KEY    01cb  MAIN      
0187  NEXT_KEY      02e1  NOT_ALT       0182  NOT_BACKSPACE    02d1  NOT_CTRL  
02c1  NOT_SHIFT     029d  NOT_UP_KEY    8001  NUMKEY        0058  OUTBLOOP  
0056  OUTBYTES      c040  OUTPUT_BUF    000a  PAUSE         00f8  PHEXBYTE  
012d  PHEXWORD      0004  PIC           8003  PICBYTE       8000  PIC_COMMAND
0002  PIC_KBD_CMD    0000  PIC_NON_CMD    0001  PIC_SER_CMD    0003  PIC_TIM_CMD
0367  PLEASESTR     01fc  PRINTAGAIN    0059  RSHIFT_KEY    8004  SHIFT_STATUS
4000  SHITAGAIN     400f  SHITSTR       4020  SHOOTSTR      800d  SHOULD_RUN
0000  STACKTOP      01b8  STRCPY        01ba  STRCPY_LOOP    8007  UPKEY_FLAG
00f0  UP_KEY        00e4  WAITSECS      
