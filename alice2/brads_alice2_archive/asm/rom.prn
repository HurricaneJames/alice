                        ; Defined if we are running slow:
                        
                        
                        ; Defined to turn off printing:
                        
                        
                        ; library.asm must be first!
                        
                        ;
                        ; Commonly used assembly routines
                        ;
                        
                        ; 8259 Constants
   0000                 I8259A EQU 000H ; 8259 port 1
   0001                 I8259B EQU 001H ; 8259 port 2
                        
   000a                 PAUSE EQU 0aH ; a UNIX newline
   0000                 STACKTOP EQU 00000H ; top of stack (wraps to 0ffff)
                        
                        ; PIC Constants
   0004                 PIC EQU 004H ; PIC I/O port
                        
                        ;
                        ; Set up useful stuff, jump to main program
                        ;
   0000   31 00 00       LD SP, STACKTOP
   0003   c3 1d 01       JP MAIN ; get past library routines
                        
                        ;
                        ; Catch reset if it happens and try to print it on the LCD
                        ;
                        
   0038                  ORG 0038H ; Catch a reset
   0038   76             HALT
                        
                        ;
                        ; Wait for seconds routine
                        ; In:
                        ; A - number of seconds to wait
                        ;
   0039                 WAITSECS
   0039   f5             PUSH AF
   003a   c5             PUSH BC
   003b   07             RLCA ; multiply A by 2
                        
   003c                 LCDP1SLP1
   003c   0e 00          LD C, 0 ; 256 * 256 cycles
   003e                 LCDP1SLP2
   003e   06 00          LD B, 0 ; 256 cycles
   0040                 LCDP1SLP3
   0040   10 fe          DJNZ LCDP1SLP3
                        
   0042   0d             DEC C
   0043   c2 3e 00       JP NZ, LCDP1SLP2
                        
   0046   3d             DEC A
   0047   c2 3c 00       JP NZ, LCDP1SLP1
                        
   004a   c1             POP BC
   004b   f1             POP AF
                        
   004c   c9             RET
                        
                        
                        ;
                        ; put the hex string representation of A into the location at IX
                        ; IX becomes IX + 2
                        ;
   004d                 PHEXBYTE
   004d   f5             PUSH AF
   004e   c5             PUSH BC
                        
   004f   47             LD B, A
   0050   e6 f0          AND 0f0H
   0052   cb 3f          SRL A
   0054   cb 3f          SRL A
   0056   cb 3f          SRL A
   0058   cb 3f          SRL A
   005a   fe 0a          CP 0aH
   005c   da 64 00       JP C, DIG1LESS
   005f   c6 57          ADD A, "a" - 10
   0061   c3 66 00       JP DIG1DONE
   0064                 DIG1LESS
   0064   c6 30          ADD A, "0"
   0066                 DIG1DONE
                        
   0066   dd 77 00       LD (IX), A
   0069   dd 23          INC IX
   006b   78             LD A, B
   006c   e6 0f          AND 0fH
   006e   fe 0a          CP 0aH
   0070   da 78 00       JP C, DIG2LESS
   0073   c6 57          ADD A, "a" - 10
   0075   c3 7a 00       JP DIG2DONE
   0078                 DIG2LESS
   0078   c6 30          ADD A, "0"
   007a                 DIG2DONE
   007a   dd 77 00       LD (IX), A
   007d   dd 23          INC IX
                        
   007f   c1             POP BC
   0080   f1             POP AF
   0081   c9             RET
                        
                        ;
                        ; put the hex string representation of HL into the location at IX
                        ; IX becomes IX + 4
                        ;
   0082                 PHEXWORD
                        
   0082   f5             PUSH AF
   0083   7c             LD A, H
   0084   cd 4d 00       CALL PHEXBYTE
   0087   7d             LD A, L
   0088   cd 4d 00       CALL PHEXBYTE
   008b   f1             POP AF
   008c   c9             RET
                        
                        
                        ;
                        ; GETS - Inputs a string into the
                        ; buffer pointed to by HL. String is
                        ; NULL-terminated and does not contain
                        ; the linefeed.
                        ;
                        ; No registers are modified.
                        ;
                        
   008d                 GETS
   008d   f5             PUSH AF
   008e   e5             PUSH HL
   008f   c5             PUSH BC
   0090   d5             PUSH DE
   0091   dd e5          PUSH IX
   0093   fd e5          PUSH IY
                        
   0095   e5             PUSH HL
   0096   dd e1          POP IX ; IX = end of buffer
   0098   dd 36 00 00    LD (IX), 0
                        
   009c                 GETS_LOOP ; wait for key
   009c   3a 01 80       LD A, (NUMKEY)
   009f   fe 00          CP 0
   00a1   c2 b0 00       JP NZ, GOT_KEY
                        
   00a4   3a 0d 80       LD A, (SHOULD_RUN)
   00a7   fe 00          CP 0
   00a9   ca 9c 00       JP Z, GETS_LOOP
                        
                         ; comment this in for the next burn-in
                         ; LD A, 0
                         ; LD (SHOULD_RUN), A
                        
   00ac   2a 09 80       LD HL, (CURRENT_ADDR)
   00af   e9             JP (HL)
                        
   00b0                 GOT_KEY
                                ; Copy entire keyboard buffer into ours.
   00b0   f3             DI
   00b1   3a 01 80       LD A, (NUMKEY) ; in case it changed before DI
   00b4   fd 21 00 81    LD IY, KEYBUF
   00b8   47             LD B, A
                        
   00b9                 GETS_COPY
   00b9   fd 7e 00       LD A, (IY)
                        
   00bc   fe 0a          CP 10 ; return (keyboard)
   00be   ca f7 00       JP Z, GETS_DONE
   00c1   fe 0d          CP 13 ; return (maybe serial)
   00c3   ca f7 00       JP Z, GETS_DONE
   00c6   fe 08          CP 8 ; backspace
   00c8   ca d0 00       JP Z, BACKSPACE
   00cb   fe 7f          CP 127 ; delete
   00cd   c2 e1 00       JP NZ, NOT_BACKSPACE
                        
   00d0                 BACKSPACE
                         ; do not backspace past beginning of buffer
   00d0   dd e5          PUSH IX ; move IX into DE
   00d2   d1             POP DE
   00d3   37             SCF ; carry = 1
   00d4   3f             CCF ; carry = 0
   00d5   e5             PUSH HL ; save HL
   00d6   ed 52          SBC HL, DE ; HL -= DE
   00d8   e1             POP HL ; restore HL
   00d9   ca e6 00       JP Z, NEXT_KEY ; do not backspace if IX == HL
                        
   00dc   dd 2b          DEC IX
   00de   c3 e6 00       JP NEXT_KEY
                        
   00e1                 NOT_BACKSPACE
   00e1   dd 77 00       LD (IX), A ; copy letter to our buffer
   00e4   dd 23          INC IX
                        
   00e6                 NEXT_KEY
   00e6   fd 23          INC IY
                        
   00e8   10 cf          DJNZ GETS_COPY
                        
   00ea   3e 00          LD A, 0
   00ec   32 01 80       LD (NUMKEY), A
   00ef   fb             EI
                        
   00f0   dd 36 00 00    LD (IX), 0
                         ; CALL LCDPRINT
                        
   00f4   c3 9c 00       JP GETS_LOOP
                        
   00f7                 GETS_DONE
   00f7   3e 00          LD A, 0
   00f9   32 01 80       LD (NUMKEY), A
   00fc   fb             EI
                        
   00fd   dd 36 00 00           LD (IX), 0 ; nul-terminate.
                        
   0101   fd e1          POP IY
   0103   dd e1          POP IX
   0105   d1             POP DE
   0106   c1             POP BC
   0107   e1             POP HL
   0108   f1             POP AF
   0109   c9             RET
                        
                        ;----------------------------------------
                        
                        ;
                        ; STRCPY - Copies HL into IX.
                        ;
                        ; Leaves IX at terminating 0. No other
                        ; registers are modified.
                        ;
                        ;
                        ;
                        
   010a                 STRCPY
   010a   e5             PUSH HL
   010b   f5             PUSH AF
                        
   010c                 STRCPY_LOOP
   010c   7e             LD A, (HL)
   010d   dd 77 00       LD (IX), A
   0110   23             INC HL
   0111   dd 23          INC IX
                        
   0113   fe 00          CP 0
   0115   c2 0c 01       JP NZ, STRCPY_LOOP
                        
   0118   dd 2b          DEC IX
                        
   011a   f1             POP AF
   011b   e1             POP HL
   011c   c9             RET
                        
                        ;----------------------------------------
                        
   8000                 PIC_COMMAND EQU 08000H
   8001                 NUMKEY EQU 08001H ; number of keys in keyboard buffer.
   8003                 PICBYTE EQU 08003H
   8004                 SHIFT_STATUS EQU 08004H
   8005                 CTRL_STATUS EQU 08005H
   8006                 ALT_STATUS EQU 08006H
   8007                 UPKEY_FLAG EQU 08007H
   8008                 CURRENT_CMD EQU 08008H
   8009                 CURRENT_ADDR EQU 08009H ; two bytes
   800b                 CURRENT_LEN EQU 0800BH
   800c                 CURRENT_PTR EQU 0800CH ; point into CURRENT_CMD
   800d                 SHOULD_RUN EQU 0800DH ; whether to jump to addr from serial.
   800e                 TIMER_COUNTER EQU 0800EH ; incremented each time we get a timer.
   8100                 KEYBUF EQU 08100H ; keyboard buffer.
   8200                 INPUT_BUF EQU 08200H
   8300                 OUTPUT_BUF EQU 08300H
                        
   0012                 LSHIFT_KEY EQU 012H
   0059                 RSHIFT_KEY EQU 059H
   0014                 CTRL_KEY EQU 014H
   0011                 ALT_KEY EQU 011H
   00f0                 UP_KEY EQU 0F0H
   00e0                 EXT_KEY EQU 0E0H
   00e1                 EXT2_KEY EQU 0E1H
                        
   0000                 PIC_NON_CMD EQU 000H
   0001                 PIC_SER_CMD EQU 001H
   0002                 PIC_KBD_CMD EQU 002H
   0003                 PIC_TIM_CMD EQU 003H
                        
   0001                 CMD_SEND EQU 001H
   0002                 CMD_RUN EQU 002H
   0003                 CMD_MAX EQU 003H ; one past max value of a command
                        
                        
                        ;----------------------------------------
                        
                        ;
                        ; Memory test program
                        ;
                        
   011d                 MAIN
   011d   cd 60 01              CALL GFX_CLS
                        
   0120   3e 04                 LD A, 4
   0122   cd 61 01              CALL GFX_GRAYBAR
                        
                        ;
                        ; Setup the 8259
                        ;
                        
   0125   3e 16          LD A, 016H ; F = 1, S = 1
   0127   d3 00          OUT (I8259A), A
                        
   0129   3e 3f          LD A, 03FH ; Table is at 03F00H
   012b   d3 01          OUT (I8259B), A
                        
   012d   3e f0          LD A, 0F0H ; Enable lower 4 IRQs
   012f   d3 01          OUT (I8259B), A
                        
                        ;
                        ; Initialize our variables
                        ;
                        
   0131   3e 00          LD A, 0
   0133   32 00 80       LD (PIC_COMMAND), A
   0136   32 01 80       LD (NUMKEY), A
   0139   32 04 80       LD (SHIFT_STATUS), A
   013c   32 05 80       LD (CTRL_STATUS), A
   013f   32 06 80       LD (ALT_STATUS), A
   0142   32 07 80       LD (UPKEY_FLAG), A
   0145   32 0c 80       LD (CURRENT_PTR), A
   0148   32 0d 80       LD (SHOULD_RUN), A
   014b   32 0e 80       LD (TIMER_COUNTER), A
                        
                        ;
                        ; Read a byte from the pic in case it triggered
                        ; an interrupt before we were ready (keyboard
                        ; reset). This resets the PIC interrupt line.
                        ;
                        ; The command read routine throws away commands it does not understand,
                        ; so it is likely we will get the keyboard init status byte here but the
                        ; command read routine will chuck it and we will catch up on the next byte.
                        ;
                        
   014e   db 04          IN A, (PIC)
                        
                        ;
                        ; Setup interrupt mode 0
                        ;
                        
   0150   ed 46          IM 0
   0152   fb             EI
                        
                        ;
                        ; Go, go, go!
                        ;
                        
   0153                 PRINTAGAIN
   0153   3e 05                 LD A, 5
   0155   cd 61 01              CALL GFX_GRAYBAR
                        
   0158   3e 01                 LD A, 1
   015a   cd 39 00              CALL WAITSECS
                        
   015d   c3 53 01       JP PRINTAGAIN
                        
   0160                 GFX_CLS
   0160   c9                    RET
   0161                 GFX_GRAYBAR
   0161   c9                    RET
                        
                        ;----------------------------------------
                        
   0162                 ISR0 ; PIC interrupt
                        
                         ;
                         ; The PIC sends a command byte followed by an
                         ; optional data byte.
                         ;
                         ; Command byte: PIC_SER_CMD
                         ; Data byte: serial byte in ASCII
                         ;
                         ; Command byte: PIC_KBD_CMD
                         ; Data byte: keyboard byte as scan code
                         ;
                         ; Command byte: PIC_TIM_CMD
                         ; Data byte: none
                         ;
                         ; Current command is stored in PIC_COMMAND, which is
                         ; equal to PIC_NON_CMD if we are waiting for a command.
                         ;
                        
   0162   f5             PUSH AF
                        
   0163   3e 06                 LD A, 6
   0165   cd 61 01              CALL GFX_GRAYBAR
                        
   0168   db 04          IN A, (PIC)
   016a   c6 07                 ADD A, 7
   016c   cd 61 01              CALL GFX_GRAYBAR
                        
   016f   3e 20          LD A, 020H ; End of Interrupt
   0171   d3 00          OUT (I8259A), A
                        
   0173   f1             POP AF
   0174   fb             EI
   0175   c9             RET
                        
                        ;------------------
                        
   0176                 ISR1
   0176   f5             PUSH AF
                        
   0177   3e 20          LD A, 020H ; End of Interrupt
   0179   d3 00          OUT (I8259A), A
                        
   017b   f1             POP AF
   017c   fb             EI
   017d   c9             RET
                        
                        ;------------------
                        
   017e                 ISR2
   017e   f5             PUSH AF
                        
   017f   3e 20          LD A, 020H ; End of Interrupt
   0181   d3 00          OUT (I8259A), A
                        
   0183   f1             POP AF
   0184   fb             EI
   0185   c9             RET
                        
                        ;------------------
                        
   0186                 ISR3
   0186   f5             PUSH AF
                        
   0187   3e 20          LD A, 020H ; End of Interrupt
   0189   d3 00          OUT (I8259A), A
                        
   018b   f1             POP AF
   018c   fb             EI
   018d   c9             RET
                        
                        ;------------------
                        
   018e                 ISR4
   018e   f5             PUSH AF
                        
   018f   3e 20          LD A, 020H ; End of Interrupt
   0191   d3 00          OUT (I8259A), A
                        
   0193   f1             POP AF
   0194   fb             EI
   0195   c9             RET
                        
                        ;------------------
                        
   0196                 ISR5
   0196   f5             PUSH AF
                        
   0197   3e 20          LD A, 020H ; End of Interrupt
   0199   d3 00          OUT (I8259A), A
                        
   019b   f1             POP AF
   019c   fb             EI
   019d   c9             RET
                        
                        ;------------------
                        
   019e                 ISR6
   019e   f5             PUSH AF
                        
   019f   3e 20          LD A, 020H ; End of Interrupt
   01a1   d3 00          OUT (I8259A), A
                        
   01a3   f1             POP AF
   01a4   fb             EI
   01a5   c9             RET
                        
                        ;------------------
                        
   01a6                 ISR7
   01a6   f5             PUSH AF
                        
   01a7   3e 20          LD A, 020H ; End of Interrupt
   01a9   d3 00          OUT (I8259A), A
                        
   01ab   f1             POP AF
   01ac   fb             EI
   01ad   c9             RET
                        
                        ;----------------------------------------
                        
   01ae   50 49 43 31   INTROSTR DB "PIC16C64 test", 10, 0
   01b2   36 43 36 34   
   01b6   20 74 65 73   
   01ba   74 0a 00      
                        
   01bd   41 6c 69 63   BOOTSTR DB "Alice II, v1.0", 0
   01c1   65 20 49 49   
   01c5   2c 20 76 31   
   01c9   2e 30 00      
   01cc   48 65 6c 6c   HELLOSTR DB "Hello ", 0
   01d0   6f 20 00      
                        
   01d3                 KEY_XLAT ; Normal, shift, ctrl, alt
   01d3   3f 3f 3f 3f    DB '?', '?', '?', '?'
   01d7   39 39 39 39    DB '9', '9', '9', '9' ; F9
   01db   3f 3f 3f 3f    DB '?', '?', '?', '?'
   01df   35 35 35 35    DB '5', '5', '5', '5' ; F5
   01e3   33 33 33 33    DB '3', '3', '3', '3' ; F3
   01e7   31 31 31 31    DB '1', '1', '1', '1' ; F1
   01eb   32 32 32 32    DB '2', '2', '2', '2' ; F2
   01ef   31 31 31 31    DB '1', '1', '1', '1' ; F12
   01f3   3f 3f 3f 3f    DB '?', '?', '?', '?'
   01f7   31 31 31 31    DB '1', '1', '1', '1' ; F10
   01fb   38 38 38 38    DB '8', '8', '8', '8' ; F8
   01ff   36 36 36 36    DB '6', '6', '6', '6' ; F6
   0203   34 34 34 34    DB '4', '4', '4', '4' ; F4
   0207   09 09 09 09    DB 9, 9, 9, 9 ; Tab
   020b   60 7e 60 60    DB '`', '~', '`', '`'
   020f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0213   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0217   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Alt
   021b   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Left shift
   021f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0223   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Control
   0227   71 51 11 11    DB 'q', 'Q', 17, 17
   022b   31 21 31 31    DB '1', '!', '1', '1'
   022f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0233   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0237   3f 3f 3f 3f    DB '?', '?', '?', '?'
   023b   7a 5a 1a 1a    DB 'z', 'Z', 26, 26
   023f   73 53 13 13    DB 's', 'S', 19, 19
   0243   61 41 01 01    DB 'a', 'A', 1, 1
   0247   77 57 17 17    DB 'w', 'W', 23, 23
   024b   32 40 32 32    DB '2', '@', '2', '2'
   024f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0253   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0257   63 43 03 03    DB 'c', 'C', 3, 3
   025b   78 58 18 18    DB 'x', 'X', 24, 24
   025f   64 44 04 04    DB 'd', 'D', 4, 4
   0263   65 45 05 05    DB 'e', 'E', 5, 5
   0267   34 24 34 34    DB '4', '$', '4', '4'
   026b   33 23 33 33    DB '3', '#', '3', '3'
   026f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0273   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0277   20 20 20 20    DB ' ', ' ', ' ', ' '
   027b   76 56 16 16    DB 'v', 'V', 22, 22
   027f   66 46 06 06    DB 'f', 'F', 6, 6
   0283   74 54 14 14    DB 't', 'T', 20, 20
   0287   72 52 12 12    DB 'r', 'R', 18, 18
   028b   35 25 35 35    DB '5', '%', '5', '5'
   028f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0293   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0297   6e 4e 0e 0e    DB 'n', 'N', 14, 14
   029b   62 42 02 02    DB 'b', 'B', 2, 2
   029f   68 48 08 08    DB 'h', 'H', 8, 8
   02a3   67 47 07 07    DB 'g', 'G', 7, 7
   02a7   79 59 19 19    DB 'y', 'Y', 25, 25
   02ab   36 5e 36 36    DB '6', '^', '6', '6'
   02af   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02b3   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02b7   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02bb   6d 4d 0d 0d    DB 'm', 'M', 13, 13
   02bf   6a 4a 0a 0a    DB 'j', 'J', 10, 10
   02c3   75 55 15 15    DB 'u', 'U', 21, 21
   02c7   37 26 37 37    DB '7', '&', '7', '7'
   02cb   38 2a 38 38    DB '8', '*', '8', '8'
   02cf   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02d3   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02d7   2c 3c 2c 2c    DB ',', '<', ',', ','
   02db   6b 4b 0b 0b    DB 'k', 'K', 11, 11
   02df   69 49 09 09    DB 'i', 'I', 9, 9
   02e3   6f 4f 0f 0f    DB 'o', 'O', 15, 15
   02e7   30 29 30 30    DB '0', ')', '0', '0'
   02eb   39 28 39 39    DB '9', '(', '9', '9'
   02ef   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02f3   3f 3f 3f 3f    DB '?', '?', '?', '?'
   02f7   2e 3e 2e 2e    DB '.', '>', '.', '.'
   02fb   2f 3f 2f 2f    DB '/', '?', '/', '/'
   02ff   6c 4c 0c 0c    DB 'l', 'L', 12, 12
   0303   3b 3a 3b 3b    DB ';', ':', ';', ';'
   0307   70 50 10 10    DB 'p', 'P', 16, 16
   030b   2d 5f 2d 2d    DB '-', '_', '-', '-'
   030f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0313   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0317   3f 3f 3f 3f    DB '?', '?', '?', '?'
   031b   27 22 27 27    DB 39, '"', 39, 39 ; Single quote
   031f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0323   5b 7b 5b 5b    DB '[', '{', '[', '['
   0327   3d 2b 3d 3d    DB '=', '+', '=', '='
   032b   3f 3f 3f 3f    DB '?', '?', '?', '?'
   032f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0333   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Caps lock
   0337   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Right shift
   033b   0a 0a 0a 0a    DB 10, 10, 10, 10 ; Enter
   033f   5d 7d 5d 5d    DB ']', '}', ']', ']'
   0343   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0347   5c 7c 5c 5c    DB 92, '|', 92, 92 ; Backslash
   034b   3f 3f 3f 3f    DB '?', '?', '?', '?'
   034f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0353   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0357   3f 3f 3f 3f    DB '?', '?', '?', '?'
   035b   3f 3f 3f 3f    DB '?', '?', '?', '?'
   035f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0363   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0367   3f 3f 3f 3f    DB '?', '?', '?', '?'
   036b   08 08 08 08    DB 8, 8, 8, 8 ; Backspace
   036f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0373   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0377   31 31 31 31    DB '1', '1', '1', '1' ; Numeric 1
   037b   3f 3f 3f 3f    DB '?', '?', '?', '?'
   037f   34 34 34 34    DB '4', '4', '4', '4' ; Numeric 4
   0383   37 37 37 37    DB '7', '7', '7', '7' ; Numeric 7
   0387   3f 3f 3f 3f    DB '?', '?', '?', '?'
   038b   3f 3f 3f 3f    DB '?', '?', '?', '?'
   038f   3f 3f 3f 3f    DB '?', '?', '?', '?'
   0393   30 30 30 30    DB '0', '0', '0', '0' ; Numeric 0
   0397   2e 2e 2e 2e    DB '.', '.', '.', '.' ; Numeric .
   039b   32 32 32 32    DB '2', '2', '2', '2' ; Numeric 2
   039f   35 35 35 35    DB '5', '5', '5', '5' ; Numeric 5
   03a3   36 36 36 36    DB '6', '6', '6', '6' ; Numeric 6
   03a7   38 38 38 38    DB '8', '8', '8', '8' ; Numeric 8
   03ab   1b 1b 1b 1b    DB 27, 27, 27, 27 ; Escape
   03af   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Num lock
   03b3   31 31 31 31    DB '1', '1', '1', '1' ; F11
   03b7   2b 2b 2b 2b    DB '+', '+', '+', '+' ; Numeric +
   03bb   33 33 33 33    DB '3', '3', '3', '3' ; Numeric 3
   03bf   2d 2d 2d 2d    DB '-', '-', '-', '-' ; Numeric -
   03c3   2a 2a 2a 2a    DB '*', '*', '*', '*' ; Numeric *
   03c7   39 39 39 39    DB '9', '9', '9', '9' ; Numeric 9
   03cb   3f 3f 3f 3f    DB '?', '?', '?', '?' ; Scroll lock
   03cf   3f 3f 3f 3f    DB '?', '?', '?', '?'
                        
   9000                  ORG 09000H
                        
                        ; #include "zcc_out.asm"
                        ; #include "libc.asm"
                        
   3f00                  ORG 03F00H
   3f00                 INTTABLE
                        
                         ; IRQ0
   3f00   c3 62 01       JP ISR0
   3f03   00             DB 0
                        
                         ; IRQ1
   3f04   c3 76 01       JP ISR1
   3f07   00             DB 0
                        
                         ; IRQ2
   3f08   c3 7e 01       JP ISR2
   3f0b   00             DB 0
                        
                         ; IRQ3
   3f0c   c3 86 01       JP ISR3
   3f0f   00             DB 0
                        
                         ; IRQ4
   3f10   c3 8e 01       JP ISR4
   3f13   00             DB 0
                        
                         ; IRQ5
   3f14   c3 96 01       JP ISR5
   3f17   00             DB 0
                        
                         ; IRQ6
   3f18   c3 9e 01       JP ISR6
   3f1b   00             DB 0
                        
                         ; IRQ7
   3f1c   c3 a6 01       JP ISR7
   3f1f   00             DB 0
                        
   3f20                  END
0011  ALT_KEY       8006  ALT_STATUS    00d0  BACKSPACE     01bd  BOOTSTR   
0003  CMD_MAX       0002  CMD_RUN       0001  CMD_SEND      0014  CTRL_KEY  
8005  CTRL_STATUS    8009  CURRENT_ADDR    8008  CURRENT_CMD    800b  CURRENT_LEN
800c  CURRENT_PTR    0066  DIG1DONE      0064  DIG1LESS      007a  DIG2DONE  
0078  DIG2LESS      00e1  EXT2_KEY      00e0  EXT_KEY       008d  GETS      
00b9  GETS_COPY     00f7  GETS_DONE     009c  GETS_LOOP     0160  GFX_CLS   
0161  GFX_GRAYBAR    00b0  GOT_KEY       01cc  HELLOSTR      0000  I8259A    
0001  I8259B        8200  INPUT_BUF     01ae  INTROSTR      3f00  INTTABLE  
0162  ISR0          0176  ISR1          017e  ISR2          0186  ISR3      
018e  ISR4          0196  ISR5          019e  ISR6          01a6  ISR7      
8100  KEYBUF        01d3  KEY_XLAT      003c  LCDP1SLP1     003e  LCDP1SLP2 
0040  LCDP1SLP3     0012  LSHIFT_KEY    011d  MAIN          00e6  NEXT_KEY  
00e1  NOT_BACKSPACE    8001  NUMKEY        8300  OUTPUT_BUF    000a  PAUSE     
004d  PHEXBYTE      0082  PHEXWORD      0004  PIC           8003  PICBYTE   
8000  PIC_COMMAND    0002  PIC_KBD_CMD    0000  PIC_NON_CMD    0001  PIC_SER_CMD
0003  PIC_TIM_CMD    0153  PRINTAGAIN    0059  RSHIFT_KEY    8004  SHIFT_STATUS
800d  SHOULD_RUN    0000  STACKTOP      010a  STRCPY        010c  STRCPY_LOOP
800e  TIMER_COUNTER    8007  UPKEY_FLAG    00f0  UP_KEY        0039  WAITSECS  
