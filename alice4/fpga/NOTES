
- Z buffer plan:
    - To do:
        * Make Z test.
            * Use protocol.
            * Make two triangles that intersect.
            * Have them rotate, change order, and turn Z buffering on
                and off.
        * Add memory controllers.
        * Update code to use new controllers.
        * Try adding .qip files of qsys output.
            - First compile: 5:58
            - Second compile: 5:49
            - First compile adding qip file: 6:07
            - Second compile adding qip file: 6:05
            - First compile removing soc file: 8:02
            - Second compile removing soc file:
        * Make write FIFO.
            * Takes as parameters:
                - Third memory controller fields:
                    - write_color_address
                    - write_color_burstcount
                    - write_color_waitrequest
                    - write_color_writedata
                    - write_color_byteenable
                    - write_color_write
                    - write_z_address
                    - write_z_burstcount
                    - write_z_waitrequest
                    - write_z_writedata
                    - write_z_byteenable
                    - write_z_write
                - FIFO controls:
                    - enqueue
                    - color_address
                    - color
                    - z_address
                    - z
                    - pixel_active
                    - fifo_size
                - clock
                - reset_n
            * Instantiate sc_fifo.
            * Enqueue based on "enqueue". Pack values.
            - Possible cases:
                - State:
                    1. Queue has item.
                    2. Waiting for write color.
                    3. Waiting for write Z.
                    4. Fifo read (last clock).
                - Cases:
                    -   Q  C  Z  F  
                    -   -  -  -  -      Nothing.
                    -   -  -  -  *      Assert write.
                    -   -  -  *  -
                    -   -  -  *  *      Invalid.
                    -   -  *  -  -
                    -   -  *  -  *      Invalid.
                    -   -  *  *  -
                    -   -  *  *  *      Invalid.
                    -   *  -  -  -
                    -   *  -  -  *
                    -   *  -  *  -
                    -   *  -  *  *      Invalid.
                    -   *  *  -  -
                    -   *  *  -  *      Invalid.
                    -   *  *  *  -
                    -   *  *  *  *      Invalid.


                    Q   CWr CWa ZWr ZWa FRd
                    -   -   X   -   X   -    Nothing
                    -   -   X   -   X   *    Start write.
                    -   -   X   *   -   -
                    -   -   X   *   -   *
                    -   -   X   *   *   -
                    -   -   X   *   *   *
                    -   *   -   -   X   -
                    -   *   -   -   X   *
                    -   *   -   *   -   -
                    -   *   -   *   -   *
                    -   *   -   *   *   -
                    -   *   -   *   *   *
                    -   *   *   -   X   -
                    -   *   *   -   X   *
                    -   *   *   *   -   -
                    -   *   *   *   -   *
                    -   *   *   *   *   -
                    -   *   *   *   *   *
                    *   -   X   -   X   -
                    *   -   X   -   X   *
                    *   -   X   *   -   -
                    *   -   X   *   -   *
                    *   -   X   *   *   -
                    *   -   X   *   *   *
                    *   *   -   -   X   -
                    *   *   -   -   X   *
                    *   *   -   *   -   -
                    *   *   -   *   -   *
                    *   *   -   *   *   -
                    *   *   -   *   *   *
                    *   *   *   -   X   -
                    *   *   *   -   X   *
                    *   *   *   *   -   -
                    *   *   *   *   -   *
                    *   *   *   *   *   -
                    *   *   *   *   *   *
                                        

                - Time:
                    - Queue is empty. Do nothing.

                    - Queue has item. Assert fifo_read.
                    - Word is available from queue. Assert memory write, deassert fifo_read.
                    - No wait request. Deassert memory write.

                    - Queue has item. Assert fifo_read.
                    - Word is available from queue. Assert memory write, deassert fifo_read.
                    - Wait request. Do nothing.
                    - No wait request. Deassert memory write.

            - If (!write or !waitrequest) and queue not empty:
                - Dequeue and write to color.
                - Write to Z.
            - Need simple state machine for dequeuing and waiting
                for memory write.
        - In rasterization loop, write to write FIFO, blocking if
            it's nearly full.
    - Add a memory controller port:
        0. Front buffer scanout.
        1. Read command buffer and Z.
        2. Write color.
        3. Write Z.
    - Create a read FIFO:
        - Width:
            - 29 bits: color address.
            - 48 bits: color.
            - 29 bits: Z address.
            - 64 bits: Z.
            - 2 bits: which pixel is active.
            - 172 bits total.
            - Could use address offset:
                - 800*480/2 = 192,000 = 18 bits.
                - 132 bits total.
        - Depth 32?
    - Create a write FIFO:
        - Width:
            - (Same as above).
        - Depth 32?
    - In triangle setup:
        - Set up Z address
        - Set up Z values.
    - In draw loop:
        - Block if size of both FIFOs exceeds size of write FIFO.
        - Instead of assigning writeenable, write to read FIFO.
        - Also initiate Z read.
    - When Z read returns:
        - Also read from read FIFO.
        - Store in registers.
        - One clock later, compare Z.
        - If succeeds, or if Z-buffer is disabled, write to write FIFO.
        - No need for state machine, it's a pipeline.
    - If write FIFO is not empty:
        - Read entry.
        - Write to color buffer.
        - Write to Z buffer.
        - Use state machine.
    - Need to flush FIFOs before the next triangle.
        - Could do that at end of triangle.
        - Or could do that both at beginning of triangle (after setup)
            and before swap.
    - Keep track of total number of pixels in the pipeline.
        - Single global register.
        - Algorithm:
            - If read_z and read_write_fifo:
                - Do nothing.
            - else if read_z:
                - count++
            - else if read_write_fifo:
                - count--
            - else:
                - Do nothing.
        - That's fine for counting what's in the FIFOs, but can't be
            used for flushing the FIFOs. Maybe use the end of Z write
            for that.

- Naming conventions:
    - Registers and wires: all lower case with underscores.
    - Modules: Sentence capitalization (first letter only) with underscores.
    - Constants: All caps.
    - Active low: _n suffix (reset_n).
    - Input parameters: No special syntax.
    - Output parameters: No special syntax.
    - Always specify "wire" or "reg" in parameters.

- Xilinx
    - FPGAs
        - https://www.xilinx.com/support/documentation/selection-guides/cost-optimized-product-selection-guide.pdf
        - Spartan (low-cost)
            - Retired?
            - Spartan-3 is older.
            - Spartan-6
                - 45nm.
                - Spartan-6 LX
                    - Some have more than 4 MB block RAM.
                - Spartan-6 LXT (with serial connectivity, PCIe)
            - Spartan-7
                - 28nm.
        - Artix (low-cost)
            - Artix-7
                - 28nm.
        - Zynq-7000 (with embedded ARM).
        - Virtex (high performance)
            - Virtex-7
                - 28nm.
            - Virtex UltraScale.
                - 20nm.
            - Virtex UltraScale+.
                - 16nm.
        - Kintex (mid-range)
            - Kintex-7
                - 28nm.
            - Kintex UltraScale.
                - 20nm.
            - Kintex UltraScale+.
                - 16nm.
    - Boards:
        - FS604:
            - http://www.sioi.com.au/shop/product_info.php/cPath/30_24/products_id/47
            - AU$59 ($44)
            - Spartan 6 LX4
            - 38 GPIOs.
            - 32 MB DRAM (DDR400) (With DRAM controller IP core (DDR166))
        - USB-FPGA Module 2.04
            - http://www.ztex.de/usb-fpga-2/usb-fpga-2.04.e.html
            - $130
            - Spartan 6 XL16
            - 96 GPIOs (0.1" female header on bottom).
            - 64 MB DDR SDRAM (includes controller)
            - Looks very convenient as daughter card.
        - Papilio Pro
            - http://retrocade.gadgetfactory.net/index.php?n=Main.PapilioPro
            - $85 on Amazon, $75 from GadgetFactory website.
            - Spartan 6 LX9
            - 48 GPIOs (in Wing form factor).
            - 8 MB SDRAM (will provide controller later?)
        - XuLA2-LX25
            - http://www.xess.com/shop/product/xula2-lx25/
            - $120
            - Spartan 6 LX25
            - 33 I/O pins.
            - 32 MB SDRAM (with controller interface)
            - Seems to have nice docs and example programs, but maybe all in VHDL.
        - Saturn:
            - http://numato.com/saturn-spartan-6-fpga-development-board-with-ddr-sdram/
            - $120
            - Spartan 6 LX16 or LX45
            - > 100 GPIOS
            - 64 MB LPDDR.
- Read this:
    - http://www.xess.com/static/media/appnotes/FpgasNowWhatBook.pdf





state   reset_fifo   x   y    fifo_input    wrreq   wrfull
START       0        ?   ?        ?           0       0
RESET       1        ?   ?        ?           0       0
GOING       0        0   0        C0          1       0
            0        1   0        C1          1       0
            0        2   0        C2          1       1
            0        2   0        ?           0       0
            0        3   0        C3          1       0
STOPPED     0        ?   ?        ?           0       0




Four cases:

    Make status word, display it on LCD.
        Works.

    Make status word, don't display it on LCD.
        Doesn't load, but JTAG succeeds.

    Don't make status word, display it on LCD.
        Loads, but then breaks JTAG. (Can only do it once.)

    Don't make status word, don't display it on LCD.
        Works.


                Status    Constant
              +-------------------
              |
    Display   |  Works     Breaks
              |             JTAG
              |
    Suppress  |  Fails     Works
              |

Wavedrom for Test_FIFO:

{head: {
  text: 'Alice 4 FIFO Test',
  tick: 0
}, signal: [
  {name: 'clock',                  wave: 'p..........|............'},
  {name: 'step',                   wave: 'x=========x|x=========x.', data: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "100", "101", "102", "103", "104", "105", "106", "107", "108"]},
  {name: 'write',                  wave: '0.1.......0|............'},
  {name: 'write data',             wave: 'x.========x|............', data: ["0", "1", "2", "3", "4", "5", "6", "7"]},
  {name: 'read',                   wave: '0..........|..1.......0.'},
  {name: 'read data',              wave: '0..........|..=========.', data: ["0", "0", "1", "2", "3", "4", "5", "6"]},
  {name: 'size',                   wave: '=..========|...========.', data: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "7", "6", "5", "4", "3", "2", "1", "0"]},
]}

Next:

    Check pin assignment of all Main() parameters.
    Read this page:
        http://www.alteraforum.com/forum/showthread.php?t=45817
        https://www.developpez.net/forums/d1566375/autres-langages/autres-langages/vhdl/echange-donnees-hps-fpga-via-dma/
    Check size of generated binary.


When queue data is available:

    Still to do:
        Check whether queue is empty in read_queue.
            Empty has delay. How to handle that?
            Maybe use usedw, since it's a lower bound on size.
            See scfifo-avalon bridge.
            Check online how to read safely from scfifo.
        Handle separate waits.

    // Only read from the queue if we have no delay.
    read_queue <= !wait_request && !slot1_full && !slot2_full;

    // One clock after read_queue.
    got_queue_data <= !queue_empty;

    // Two clocks after read_queue.
    case ({got_queue_data,waitrequest,slot1_full,slot2_full})
        4'b0000: begin
            // Nothing to do.
        end

        4'bxx01: begin
            // Can't happen, raise an error.
        end

        4'b0010: begin
            mem <= slot1;
            slot1_full <= 0;
        end

        4'b0011: begin
            mem <= slot1;
            slot1 <= slot2;
            slot2_full <= 0;
        end

        4'b01xx: begin
            // Steady-state, waiting for memory to stop waiting.
        end

        4'b1000: begin
            mem <= queue;
        end

        4'b1010: begin
            mem <= slot1;
            slot1 <= queue;
        end

        4'b1011: begin
            mem <= slot1;
            slot1 <= slot2;
            slot2 <= queue;
        end

        4'b1100: begin
            slot1 <= queue;
            slot1_full <= 1;
        end

        4'b1110: begin
            slot2 <= queue;
            slot2_full <= 1;
        end

        4'b1111: begin
            // Can't happen, raise error.
        end
    endcase

    queue avail mem wait    slot1 full  slot2 full
        N           N           N           N       nothing
        N           N           N           Y       can't happen.
        N           N           Y           N       mem <= slot1, clear slot 1
        N           N           Y           Y       mem <= slot1, slot1 <= slot2, clear slot 2
        N           Y           X           X       steady-state
        Y           N           N           N       mem <= queue
        Y           N           N           Y       can't happen.
        Y           N           Y           N       mem <= slot1, slot1 <= queue
        Y           N           Y           Y       mem <= slot1, slot1 <= slot2, slot2 <= queue
        Y           Y           N           N       slot1 <= queue
        Y           Y           N           Y       can't happen.
        Y           Y           Y           N       slot2 <= queue
        Y           Y           Y           Y       can't happen

{head: {
  text: 'Alice 4 Write FIFO',
  tick: 0
}, signal: [
  {name: 'clock',         wave: 'P......................'},
  {name: 'read queue',    wave: '010..1.0..10...1..0....'},
  {name: 'queue empty',   wave: '0......................'},
  {name: 'queue data',    wave: 'x.=x..==x..=x...===x...', data: "A B C D E F G"},
  {name: 'buffer',        wave: 'x..=x..==x..=x...===x..', data: "A B C D E F G"},
  {name: 'color info',    wave: 'x..=x..==x..=.x..=.==x.', data: "A B C D E F G"},
  {name: 'color write',   wave: '0..10..1.0..1.0..1...0.'},
  {name: 'color wait',    wave: '0............10...10...', phase: 0.5},
]}

